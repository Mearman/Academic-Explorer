name: 'Nx Fully Dynamic Jobs'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Generate and trigger dynamic workflow
  setup:
    runs-on: ubuntu-latest
    outputs:
      has-affected: ${{ steps.generate.outputs.has-affected }}
      workflow-content: ${{ steps.generate.outputs.workflow-content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Nx
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Generate fully dynamic workflow
        id: generate
        run: |
          # Get affected projects
          affected=$(pnpm nx show projects --affected --json || echo '[]')
          has_affected=$(echo "$affected" | jq 'length > 0')

          if [ "$has_affected" = "false" ]; then
            echo "has-affected=false" >> $GITHUB_OUTPUT
            echo "workflow-content=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Generate dependency graph
          pnpm nx graph --file=graph.json 2>/dev/null || echo '{"dependencies": {}}' > graph.json

          # Create dynamic workflow file
          cat > /tmp/dynamic-jobs.yml << 'WORKFLOW_START'
name: 'Dynamic Nx Jobs Execution'

on:
  workflow_dispatch:
    inputs:
      affected_projects:
        description: 'Affected projects JSON'
        required: true
        type: string
      dependency_graph:
        description: 'Dependency graph JSON'
        required: true
        type: string

jobs:
WORKFLOW_START

          # Function to create job steps template
          create_job_steps() {
            local task_type="$1"
            local project="$2"
            local extra_env="$3"

            cat << 'STEPS_EOF'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Setup Nx
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml', 'nx.json', '**/project.json') }}
          restore-keys: |
            nx-${{ runner.os }}-
STEPS_EOF

            if [ "$task_type" = "lint" ]; then
              echo "      - name: Lint $project"
              echo "        run: pnpm nx lint $project"
            elif [ "$task_type" = "build" ]; then
              echo "      - name: Build $project"
              echo "        run: pnpm nx build $project"
            elif [ "$task_type" = "test" ]; then
              echo "      - name: Test $project"
              echo "        run: pnpm nx test $project"
              if [ -n "$extra_env" ]; then
                echo "        env:"
                echo "          NODE_OPTIONS: '--max-old-space-size=8192'"
              fi
            fi
          }

          # Generate lint jobs (no dependencies)
          echo "$affected" | jq -r '.[]' | while read -r project; do
            safe_name=$(echo "$project" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/^-*//; s/-*$//')
            job_id="lint-$safe_name"

            echo "  $job_id:" >> /tmp/dynamic-jobs.yml
            create_job_steps "lint" "$project" >> /tmp/dynamic-jobs.yml
            echo "" >> /tmp/dynamic-jobs.yml
          done

          # Generate build jobs with dependencies
          echo "$affected" | jq -r '.[]' | while read -r project; do
            safe_name=$(echo "$project" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/^-*//; s/-*$//')
            job_id="build-$safe_name"

            # Get build dependencies
            deps=$(cat graph.json | jq -r --arg proj "$project" '
              .dependencies[$proj] // [] |
              map("build-" + (. | gsub("[^a-zA-Z0-9]"; "-") | gsub("^-+|-+$"; ""))) |
              if length > 0 then join(", ") else "" end
            ')

            echo "  $job_id:" >> /tmp/dynamic-jobs.yml
            if [ -n "$deps" ]; then
              echo "    needs: [$deps]" >> /tmp/dynamic-jobs.yml
            fi
            create_job_steps "build" "$project" >> /tmp/dynamic-jobs.yml
            echo "" >> /tmp/dynamic-jobs.yml
          done

          # Generate test jobs (depend on corresponding build job)
          echo "$affected" | jq -r '.[]' | while read -r project; do
            safe_name=$(echo "$project" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/^-*//; s/-*$//')
            job_id="test-$safe_name"
            build_job="build-$safe_name"

            echo "  $job_id:" >> /tmp/dynamic-jobs.yml
            echo "    needs: [$build_job]" >> /tmp/dynamic-jobs.yml
            create_job_steps "test" "$project" "with_env" >> /tmp/dynamic-jobs.yml
            echo "" >> /tmp/dynamic-jobs.yml
          done

          # Add quality job
          cat >> /tmp/dynamic-jobs.yml << 'QUALITY_EOF'
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Check for unused dependencies
        run: pnpm knip

QUALITY_EOF

          # Add status aggregation job
          all_jobs=$(echo "$affected" | jq -r '.[]' | while read -r project; do
            safe_name=$(echo "$project" | sed 's/[^a-zA-Z0-9]/-/g' | sed 's/^-*//; s/-*$//')
            echo "lint-$safe_name, build-$safe_name, test-$safe_name"
          done | tr '\n' ', ' | sed 's/, $//')

          cat >> /tmp/dynamic-jobs.yml << EOF
  ci-status:
    runs-on: ubuntu-latest
    needs: [$all_jobs, quality]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "All dynamic jobs completed"
          # Add status checking logic here
          echo "CI pipeline complete"

EOF

          # Store workflow content
          workflow_content=$(cat /tmp/dynamic-jobs.yml | base64 -w 0)

          echo "has-affected=$has_affected" >> $GITHUB_OUTPUT
          echo "workflow-content=$workflow_content" >> $GITHUB_OUTPUT

          echo "=== GENERATED WORKFLOW ==="
          cat /tmp/dynamic-jobs.yml

          echo "=== AFFECTED PROJECTS ==="
          echo "$affected" | jq -r '.[]'

          echo "=== DEPENDENCY GRAPH ==="
          cat graph.json | jq '.dependencies'

      - name: Create and commit dynamic workflow
        if: steps.generate.outputs.has-affected == 'true'
        run: |
          # Decode and save the workflow
          echo "${{ steps.generate.outputs.workflow-content }}" | base64 -d > .github/workflows/nx-generated.yml

          # Commit the generated workflow
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .github/workflows/nx-generated.yml

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate dynamic Nx workflow for affected projects"
            git push
          fi

  # Execute the dynamic workflow
  execute-dynamic:
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger dynamic workflow
        uses: actions/github-script@v7
        with:
          script: |
            // Get affected projects and dependency graph
            const { execSync } = require('child_process');

            // Checkout and setup
            execSync('git fetch origin');

            // Get the generated workflow
            const fs = require('fs');
            const workflowExists = fs.existsSync('.github/workflows/nx-generated.yml');

            if (workflowExists) {
              // Trigger the workflow
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'nx-generated.yml',
                ref: context.ref,
                inputs: {
                  affected_projects: '[]', // This would be populated with actual data
                  dependency_graph: '{}'   // This would be populated with actual data
                }
              });

              console.log('Dynamic workflow triggered successfully');
            } else {
              console.log('Generated workflow not found');
            }

  # Fallback jobs for when no projects are affected
  quality-fallback:
    needs: setup
    if: needs.setup.outputs.has-affected == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run workspace quality checks
        run: |
          pnpm knip
          echo "No affected projects - workspace quality checks complete"