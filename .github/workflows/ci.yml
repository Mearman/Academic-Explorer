name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: 20.x
  PNPM_VERSION: 9

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      nx-cache-key: ${{ steps.cache-keys.outputs.nx-cache-key }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=node-modules-${{ hashFiles('pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
          echo "nx-cache-key=nx-${{ runner.os }}-${{ hashFiles('nx.json', 'package.json', 'pnpm-lock.yaml', '**/tsconfig.json', 'vite.config.ts') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            node-modules-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ steps.cache-keys.outputs.nx-cache-key }}
          restore-keys: |
            nx-${{ runner.os }}-

  quality-checks:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        check: [typecheck, lint, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore Nx cache
        uses: actions/cache/restore@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}
          restore-keys: |
            ${{ needs.setup.outputs.nx-cache-key }}-
            nx-${{ runner.os }}-${{ hashFiles('nx.json', 'package.json', 'pnpm-lock.yaml') }}-
            nx-${{ runner.os }}-

      - name: Run ${{ matrix.check }}
        run: nx ${{ matrix.check }}
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload build artifact
        if: matrix.check == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 1
          compression-level: 6

      - name: Save Nx cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}-${{ matrix.check }}-${{ github.run_id }}-${{ github.run_attempt }}

  test:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        include:
          - test-type: unit
            command: test:unit:run
            timeout: 10
          - test-type: integration
            command: test:integration:run
            timeout: 15
          - test-type: e2e
            command: test:e2e
            timeout: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore Nx cache
        uses: actions/cache/restore@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}
          restore-keys: |
            ${{ needs.setup.outputs.nx-cache-key }}-
            nx-${{ runner.os }}-${{ hashFiles('nx.json', 'package.json', 'pnpm-lock.yaml') }}-
            nx-${{ runner.os }}-

      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: pnpm exec playwright install --with-deps chromium

      - name: Build application for E2E tests
        if: matrix.test-type == 'e2e'
        run: nx build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Start preview server for E2E tests
        if: matrix.test-type == 'e2e'
        run: pnpm preview &
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Wait for preview server to be ready
        if: matrix.test-type == 'e2e'
        run: |
          echo "Waiting for preview server to start..."
          timeout 30 bash -c 'until curl -f http://localhost:4173 > /dev/null 2>&1; do sleep 1; done'
          echo "Preview server responding, waiting for app to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:4173 | grep -q "Academic Explorer\|<div id=\"root\""; do sleep 2; done'
          echo "Preview server and app are ready"

      - name: Run ${{ matrix.test-type }} tests
        run: timeout ${{ matrix.timeout }}m nx ${{ matrix.command }}
        env:
          NODE_OPTIONS: '--max-old-space-size=8192 --expose-gc'

      - name: Upload coverage artifact
        if: always() && matrix.test-type == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-type }}-${{ github.sha }}
          path: coverage/
          retention-days: 7

      - name: Save Nx cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}-${{ matrix.test-type }}-${{ github.run_id }}-${{ github.run_attempt }}

  coverage-report:
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    if: always() && (needs.test.result == 'success' || needs.test.result == 'failure')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-unit-${{ github.sha }}
          path: coverage-reports/
          merge-multiple: true

      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: coverage-reports/
          fail_ci_if_error: false
          verbose: true

  release:
    needs: [setup, quality-checks, test]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      released: ${{ steps.check-release.outputs.release_created }}
      tag: ${{ steps.check-release.outputs.release_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Run semantic-release
        id: semantic-release
        run: |
          # Install semantic-release plugins
          npm install -g \
            semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/npm \
            @semantic-release/github

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Run semantic-release to create tag and GitHub release
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if release was created
        id: check-release
        run: |
          # Check if semantic-release created a new tag/release
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ] && git tag --points-at ${{ github.sha }} | grep -q "$LATEST_TAG"; then
            echo "release_created=true" >> $GITHUB_OUTPUT
            echo "release_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "new_version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
            echo "Release created: $LATEST_TAG against commit ${{ github.sha }}"
          else
            echo "release_created=false" >> $GITHUB_OUTPUT
            echo "No release created"
          fi

      - name: Update version and create follow-up commit
        if: steps.check-release.outputs.release_created == 'true'
        run: |
          # Check if package.json and CHANGELOG.md have changes from semantic-release
          if git diff --quiet HEAD package.json CHANGELOG.md; then
            echo "No changes to commit - semantic-release didn't update files"
            exit 0
          fi

          # Check current version in package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ steps.check-release.outputs.new_version }}" ]; then
            echo "Version mismatch - updating package.json from $CURRENT_VERSION to ${{ steps.check-release.outputs.new_version }}"
            npm version ${{ steps.check-release.outputs.new_version }} --no-git-tag-version
          else
            echo "Package.json already at correct version: $CURRENT_VERSION"
          fi

          # Commit the changes (semantic-release already updated the files)
          git add package.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.check-release.outputs.new_version }} [skip ci]

          Automated version bump for release ${{ steps.check-release.outputs.release_tag }}"

          # Push the follow-up commit
          git push origin main

      - name: Build for release
        if: steps.check-release.outputs.release_created == 'true'
        run: |
          # Rebuild with the updated version
          nx build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload build artifact for deployment
        if: steps.check-release.outputs.release_created == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-release-${{ github.run_id }}
          path: dist/
          retention-days: 1
          compression-level: 6

  deploy:
    needs: [release]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    if: needs.release.outputs.released == 'true'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-release-${{ github.run_id }}
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  cleanup:
    needs: [release, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    if: always()

    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            dist-${{ github.sha }}
            dist-release-${{ github.run_id }}
            coverage-*-${{ github.sha }}
          failOnError: false