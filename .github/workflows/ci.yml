name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: 20.x
  PNPM_VERSION: 9

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      nx-cache-key: ${{ steps.cache-keys.outputs.nx-cache-key }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=node-modules-${{ hashFiles('pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
          echo "nx-cache-key=nx-${{ runner.os }}-${{ hashFiles('nx.json', 'package.json', 'pnpm-lock.yaml', '**/tsconfig.json', 'vite.config.ts') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            node-modules-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ steps.cache-keys.outputs.nx-cache-key }}
          restore-keys: |
            nx-${{ runner.os }}-

  quality-checks:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        check: [typecheck, lint, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore Nx cache
        uses: actions/cache/restore@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Run ${{ matrix.check }}
        run: pnpm ${{ matrix.check }}
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload build artifact
        if: matrix.check == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 1
          compression-level: 6

      - name: Save Nx cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}-${{ matrix.check }}-${{ github.run_number }}

  test:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        test-type: [unit, integration]
        include:
          - test-type: unit
            command: test:unit:run
            timeout: 10
          - test-type: integration
            command: test:integration:run
            timeout: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore Nx cache
        uses: actions/cache/restore@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Run ${{ matrix.test-type }} tests
        run: timeout ${{ matrix.timeout }}m pnpm ${{ matrix.command }}
        env:
          NODE_OPTIONS: '--max-old-space-size=8192 --expose-gc'

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-type }}-${{ github.sha }}
          path: coverage/
          retention-days: 7

      - name: Save Nx cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}-${{ matrix.test-type }}-${{ github.run_number }}

  coverage-report:
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    if: always() && (needs.test.result == 'success' || needs.test.result == 'failure')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*-${{ github.sha }}
          path: coverage-reports/
          merge-multiple: true

      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: coverage-reports/
          fail_ci_if_error: false
          verbose: true

  release:
    needs: [setup, quality-checks, test]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      released: ${{ steps.determine-version.outputs.should_release }}
      version: ${{ steps.determine-version.outputs.new_version }}
      tag: ${{ steps.determine-version.outputs.tag_name }}
      release_commit: ${{ steps.version-bump.outputs.commit_sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Determine next version and create tag
        id: determine-version
        run: |
          # Install semantic-release plugins
          npm install -g \
            semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/npm \
            @semantic-release/git

          # Create a temporary semantic-release config for dry-run (no git operations)
          cat > .releaserc.tmp.json << 'EOF'
          {
            "branches": ["main"],
            "repositoryUrl": "https://github.com/Mearman/Academic-Explorer",
            "dryRun": false,
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator"
            ]
          }
          EOF

          # Use semantic-release in dry-run mode to determine next version
          SEMANTIC_OUTPUT=$(npx semantic-release --extends ./.releaserc.tmp.json --dry-run 2>&1) || true
          echo "$SEMANTIC_OUTPUT"

          # Extract version information
          if echo "$SEMANTIC_OUTPUT" | grep -q "The next release version is"; then
            NEW_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep "The next release version is" | sed 's/.*The next release version is \([0-9][^ ]*\).*/\1/')
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "Next version will be: ${NEW_VERSION}"

            # Create tag on the triggering commit (before any modifications)
            TAG_NAME="v${NEW_VERSION}"
            git tag "${TAG_NAME}" ${{ github.sha }}
            git push origin "${TAG_NAME}"
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "Created tag ${TAG_NAME} on commit ${{ github.sha }}"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No release needed"
          fi

          # Clean up temp file
          rm -f .releaserc.tmp.json

      - name: Update version and create changelog
        id: version-bump
        if: steps.determine-version.outputs.should_release == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Update package.json version
          npm version ${{ steps.determine-version.outputs.new_version }} --no-git-tag-version

          # Generate changelog manually using semantic-release
          npx semantic-release --dry-run || true

          # Create a manual changelog entry if one doesn't exist
          NEW_VERSION="${{ steps.determine-version.outputs.new_version }}"
          DATE=$(date +%Y-%m-%d)

          # Check if CHANGELOG.md exists, create if not
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new version entry at the top (after "# Changelog")
          if ! grep -q "## \[${NEW_VERSION}\]" CHANGELOG.md; then
            # Create temp file with new entry
            cat > temp_changelog.md << EOF
# Changelog

## [${NEW_VERSION}] - ${DATE}

### Features & Improvements
- Release ${NEW_VERSION}

EOF

            # Append rest of existing changelog (skip the first line "# Changelog")
            tail -n +2 CHANGELOG.md >> temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          fi

          # Commit the changes
          git add package.json CHANGELOG.md
          git commit -m "chore(release): ${NEW_VERSION} [skip ci]

Automated version bump and changelog update for release ${NEW_VERSION}"

          # Push the version bump commit
          git push origin main

          # Store commit SHA for later use
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "Version bump committed as ${COMMIT_SHA}"

      - name: Build with updated version
        if: steps.determine-version.outputs.should_release == 'true'
        run: |
          # Rebuild with the updated version
          pnpm build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload updated build artifact
        if: steps.determine-version.outputs.should_release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist-release-${{ github.run_id }}
          path: dist/
          retention-days: 1
          compression-level: 6

      - name: Create GitHub release
        if: steps.determine-version.outputs.should_release == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read changelog to get release notes
            let releaseNotes = '';
            try {
              const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
              const version = '${{ steps.determine-version.outputs.new_version }}';
              const lines = changelog.split('\n');
              let capturing = false;
              let capturedLines = [];

              for (const line of lines) {
                // Stop capturing if we hit another version header
                if (line.startsWith('## [') && capturing) {
                  break;
                }
                // Start capturing when we find our version
                if (line.includes(`[${version}]`)) {
                  capturing = true;
                  continue;
                }
                if (capturing && line.trim()) {
                  capturedLines.push(line);
                }
              }
              releaseNotes = capturedLines.join('\n').trim() || `Release ${version}`;
            } catch (error) {
              console.log('Error reading changelog:', error);
              releaseNotes = `Release ${{ steps.determine-version.outputs.new_version }}`;
            }

            // Create the release
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: '${{ steps.determine-version.outputs.tag_name }}',
                name: '${{ steps.determine-version.outputs.tag_name }}',
                body: releaseNotes,
                draft: false,
                prerelease: false,
                target_commitish: '${{ github.sha }}'
              });
              console.log('Created release:', release.data.html_url);
            } catch (error) {
              console.error('Error creating release:', error);
              throw error;
            }

  deploy:
    needs: [release]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    if: needs.release.outputs.released == 'true'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-release-${{ github.run_id }}
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  cleanup:
    needs: [release, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    if: always()

    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            dist-${{ github.sha }}
            dist-release-${{ github.run_id }}
            coverage-*-${{ github.sha }}
          failOnError: false