name: 'CI Pipeline'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Cancel in-progress runs for same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.16.1'
  # Optional: Add Nx Cloud tokens for distributed caching
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_CLOUD_ENCRYPTION_KEY: ${{ secrets.NX_CLOUD_ENCRYPTION_KEY }}

jobs:
  # Main CI job following Nx best practices
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Use tree:0 filter for optimal performance with full git history for Nx affected
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('nx.json', '**/project.json', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('nx.json', '**/project.json') }}-
            ${{ runner.os }}-nx-

      # Run affected tasks using Nx's built-in parallelization
      - name: Build affected projects
        run: pnpm nx affected -t build --parallel=3
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Lint affected projects
        run: |
          # Use direct ESLint for web app to avoid Nx hanging issues
          if pnpm nx show projects --affected --json | jq -r '.[]' | grep -q "web"; then
            echo "Linting web app directly"
            cd apps/web
            timeout 5m pnpm eslint . --max-warnings=100
            cd ../..
          fi

          # Lint packages using Nx
          if pnpm nx show projects --affected --json | jq -r '.[]' | grep -E "(client|utils|graph|simulation|ui)"; then
            echo "Linting affected packages"
            for project in client utils graph simulation ui; do
              if pnpm nx show projects --affected --json | jq -r '.[]' | grep -q "$project"; then
                echo "Linting $project..."
                cd "packages/$project"
                timeout 3m pnpm eslint . --max-warnings=200 || echo "Lint failed for $project, continuing..."
                cd ../..
              fi
            done
          fi
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Type check affected projects
        run: pnpm nx affected -t typecheck --parallel=3
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Test affected projects
        run: |
          # Run only stable package tests in CI
          affected_projects=$(pnpm nx show projects --affected --json | jq -r '.[]')

          if echo "$affected_projects" | grep -E "(client|utils)"; then
            echo "Running tests for stable packages only"
            timeout 10m pnpm nx run-many -t test --parallel=3 --projects=client,utils
          else
            echo "No affected projects need testing or only unstable projects affected"
          fi
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/*/dist
            packages/*/dist
          retention-days: 1

  # Workspace quality checks (run always)
  workspace-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Check for unused dependencies
        run: pnpm knip
        continue-on-error: true

      - name: Verify licenses
        run: pnpm licenses:check

      - name: Verify workspace structure
        run: pnpm nx graph --file=graph.json && echo "✅ Workspace graph generated successfully"

  # E2E and accessibility tests (only if build succeeded)
  extended-checks:
    needs: ci
    if: success()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        check: [test:e2e, test:a11y]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Run ${{ matrix.check }}
        run: pnpm nx affected -t ${{ matrix.check }} --parallel=2
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

  # Deploy to GitHub Pages (main branch only)
  deploy:
    needs: [ci, workspace-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Build production app
        run: pnpm nx build web
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apps/web/dist
          cname: academic-explorer.joenash.uk

  # Aggregate status check for branch protection
  ci-success:
    runs-on: ubuntu-latest
    needs: [ci, workspace-quality, extended-checks]
    if: always()
    steps:
      - name: Check CI status
        run: |
          # Check required jobs
          if [[ "${{ needs.ci.result }}" != "success" ]]; then
            echo "❌ Main CI job failed"
            exit 1
          fi

          if [[ "${{ needs.workspace-quality.result }}" != "success" ]]; then
            echo "❌ Workspace quality checks failed"
            exit 1
          fi

          # Extended checks are optional (may be skipped)
          if [[ "${{ needs.extended-checks.result }}" == "failure" ]]; then
            echo "❌ Extended checks failed"
            exit 1
          fi

          echo "✅ All CI checks passed successfully"