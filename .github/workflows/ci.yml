name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: 20.x
  PNPM_VERSION: 9

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=node-modules-${{ hashFiles('pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            node-modules-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

  quality-checks:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        check: [typecheck, lint, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore Nx cache
        uses: actions/cache/restore@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Run ${{ matrix.check }}
        run: pnpm ${{ matrix.check }}
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload build artifact
        if: matrix.check == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 1
          compression-level: 6

  test:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        test-type: [unit, integration]
        include:
          - test-type: unit
            command: test:unit:run
            timeout: 10
          - test-type: integration
            command: test:integration:run
            timeout: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Restore Nx cache
        uses: actions/cache/restore@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Run ${{ matrix.test-type }} tests
        run: timeout ${{ matrix.timeout }}m pnpm ${{ matrix.command }}
        env:
          NODE_OPTIONS: '--max-old-space-size=8192 --expose-gc'

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-type }}-${{ github.sha }}
          path: coverage/
          retention-days: 7

  coverage-report:
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    if: always() && (needs.test.result == 'success' || needs.test.result == 'failure')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*-${{ github.sha }}
          path: coverage-reports/
          merge-multiple: true

      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: coverage-reports/
          fail_ci_if_error: false
          verbose: true

  release:
    needs: [setup, quality-checks, test]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      released: ${{ steps.release.outputs.new_release_published }}
      version: ${{ steps.release.outputs.new_release_version }}
      tag: ${{ steps.release.outputs.new_release_git_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Remove empty files
        run: find dist -type f -size 0 -delete
        shell: bash

      - name: Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v5
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [release]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    if: needs.release.outputs.released == 'true'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  cleanup:
    needs: [release, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    if: always()

    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            dist-${{ github.sha }}
            coverage-*-${{ github.sha }}
          failOnError: false