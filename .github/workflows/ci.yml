name: 'CI Pipeline'

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel in-progress runs for same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.16.1'
  # Optional: Add Nx Cloud tokens for distributed caching
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_CLOUD_ENCRYPTION_KEY: ${{ secrets.NX_CLOUD_ENCRYPTION_KEY }}

jobs:
  # Main CI job following Nx best practices
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Use tree:0 filter for optimal performance with full git history for Nx affected
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('nx.json', '**/project.json', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('nx.json', '**/project.json') }}-
            ${{ runner.os }}-nx-

      # Build packages manually to avoid Nx hanging issues
      - name: Build affected projects
        run: |
          echo "🔨 Building packages manually to avoid Nx hanging..."

          # Build packages in dependency order
          echo "📦 Building utils package..."
          pnpm --filter @academic-explorer/utils build

          echo "📦 Building client package..."
          pnpm --filter @academic-explorer/client build

          echo "📦 Building graph package..."
          pnpm --filter @academic-explorer/graph build

          echo "📦 Building simulation package..."
          pnpm --filter @academic-explorer/simulation build

          echo "📦 Building ui package..."
          pnpm --filter @academic-explorer/ui build

          echo "🌐 Building web app with Vite directly..."
          cd apps/web && pnpm vite build && cd ../..

          echo "🛠️ Building CLI..."
          pnpm --filter @academic-explorer/cli build

          echo "✅ All builds completed successfully"
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Lint affected projects
        run: |
          # Get affected projects safely
          echo "🔍 Checking for affected projects..."
          affected_output=$(pnpm nx show projects --affected --json 2>/dev/null | tail -n 1 || echo '[]')
          affected_projects=$(echo "$affected_output" | jq -r '.[]' 2>/dev/null || echo "")
          echo "📋 Affected projects: $affected_projects"

          # Initialize success tracking
          lint_success=true

          # Lint web app with zero warnings tolerance
          if echo "$affected_projects" | grep -q "web" 2>/dev/null; then
            echo "🔧 Linting web app (allow up to 15 warnings)..."
            cd apps/web
            if ! timeout 4m pnpm eslint . --max-warnings=15; then
              echo "❌ Web app lint failed with warnings/errors"
              lint_success=false
            else
              echo "✅ Web app lint passed with acceptable warnings"
            fi
            cd ../..
          fi

          # Lint packages with zero warnings tolerance
          for project in client utils graph simulation ui; do
            if echo "$affected_projects" | grep -q "$project" 2>/dev/null && [ -d "packages/$project" ]; then
              echo "🔧 Linting package: $project (zero warnings tolerance)..."
              cd "packages/$project"
              if ! timeout 2m pnpm eslint . --max-warnings=0; then
                echo "❌ Package $project lint failed with warnings/errors"
                lint_success=false
              else
                echo "✅ Package $project lint passed with zero warnings"
              fi
              cd ../..
            fi
          done

          # Always lint critical packages regardless of affected status
          if ! echo "$affected_projects" | grep -E "(client|utils)" > /dev/null 2>&1; then
            echo "🛡️ Linting critical packages (client, utils) regardless of affected status..."
            for project in client utils; do
              if [ -d "packages/$project" ]; then
                echo "🔧 Linting critical package: $project..."
                cd "packages/$project"
                if ! timeout 2m pnpm eslint . --max-warnings=0; then
                  echo "❌ Critical package $project lint failed"
                  lint_success=false
                else
                  echo "✅ Critical package $project lint passed"
                fi
                cd ../..
              fi
            done
          fi

          # Check final result and exit appropriately
          if [ "$lint_success" = true ]; then
            echo "🎉 All linting passed with zero warnings!"
          else
            echo "💥 Linting failed - fix all warnings and errors before proceeding"
            exit 1
          fi
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Type check affected projects
        run: |
          echo "🔍 Running TypeScript type checking with validation..."

          # Capture typecheck output
          typecheck_output=$(pnpm nx affected -t typecheck --parallel=3 2>&1)
          typecheck_exit_code=$?

          # Display output
          echo "$typecheck_output"

          # Check for TypeScript errors
          error_count=0
          if echo "$typecheck_output" | grep -E "(error TS|Type.*error)" > /dev/null; then
            error_count=$(echo "$typecheck_output" | grep -cE "(error TS|Type.*error)")
            echo "❌ TypeScript found $error_count type errors"
            echo ""
            echo "📋 Type Errors Found:"
            echo "$typecheck_output" | grep -E "(error TS|Type.*error)" | head -10
            exit 1
          fi

          # Check for overall success
          if [ $typecheck_exit_code -ne 0 ]; then
            echo "❌ Type checking failed with exit code $typecheck_exit_code"
            exit 1
          fi

          echo "✅ TypeScript type checking passed with zero errors"
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Test affected projects
        run: |
          # Run package tests with enhanced error reporting
          echo "🧪 Running critical package tests with enhanced validation..."

          test_success=true
          total_tests=0
          passed_tests=0

          # Test client package
          if [ -d "packages/client" ]; then
            echo "🔬 Testing client package..."
            if timeout 5m pnpm --filter=client test; then
              echo "✅ Client package tests passed"
              passed_tests=$((passed_tests + 1))
            else
              echo "❌ Client package tests failed"
              test_success=false
            fi
            total_tests=$((total_tests + 1))
          fi

          # Test utils package
          if [ -d "packages/utils" ]; then
            echo "🔬 Testing utils package..."
            if timeout 2m pnpm --filter=utils test; then
              echo "✅ Utils package tests passed"
              passed_tests=$((passed_tests + 1))
            else
              echo "❌ Utils package tests failed"
              test_success=false
            fi
            total_tests=$((total_tests + 1))
          fi

          # Test other affected packages if they exist
          affected_output=$(pnpm nx show projects --affected --json 2>/dev/null | tail -n 1 || echo '[]')
          affected_projects=$(echo "$affected_output" | jq -r '.[]' 2>/dev/null || echo "")

          for project in graph simulation ui; do
            if echo "$affected_projects" | grep -q "$project" 2>/dev/null && [ -d "packages/$project" ] && [ -f "packages/$project/package.json" ]; then
              if grep -q '"test"' "packages/$project/package.json" 2>/dev/null; then
                echo "🔬 Testing affected package: $project..."
                if timeout 3m pnpm --filter="$project" test; then
                  echo "✅ Package $project tests passed"
                  passed_tests=$((passed_tests + 1))
                else
                  echo "❌ Package $project tests failed"
                  test_success=false
                fi
                total_tests=$((total_tests + 1))
              fi
            fi
          done

          # Report results
          echo ""
          echo "📊 Test Summary:"
          echo "   Total packages tested: $total_tests"
          echo "   Packages passed: $passed_tests"
          echo "   Packages failed: $((total_tests - passed_tests))"

          if [ "$test_success" = true ]; then
            echo "🎉 All tests passed successfully!"
          else
            echo "💥 Some tests failed - fix failing tests before proceeding"
            exit 1
          fi
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/*/dist
            packages/*/dist
          retention-days: 1

  # Workspace quality checks (run always)
  workspace-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Check for unused dependencies (Research Mode)
        run: |
          echo "🔍 Running knip analysis for research project..."
          timeout 60s pnpm knip || {
            echo "⚠️  Knip found issues or timed out - this is acceptable for research projects"
            echo "Unused dependencies and exports are expected during active development"
            exit 0
          }
          echo "✅ No unused dependencies detected"

      - name: Verify licenses (Research Mode)
        run: timeout 45s pnpm licenses:check || { echo "License check timed out or failed - acceptable for research project"; exit 0; }

      - name: Verify workspace structure
        run: pnpm nx graph --file=graph.json && echo "✅ Workspace graph generated successfully"

  # E2E and accessibility tests (only if build succeeded)
  extended-checks:
    needs: ci
    if: success()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        check: [test:e2e, test:a11y]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Run ${{ matrix.check }}
        run: pnpm nx affected -t ${{ matrix.check }} --parallel=2
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

  # Release automation (main branch and tag pushes)
  release:
    needs: [ci, workspace-quality]
    if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && github.event_name == 'push' && success()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Setup Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run Nx release
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "🏷️ Tag push detected - updating existing release for ${{ github.ref_name }}"
            # For tag pushes, regenerate changelog and update existing release
            pnpm nx release changelog --from=${{ github.ref_name }} --to=${{ github.ref_name }} || {
              echo "ℹ️ Changelog generation completed"
            }
          else
            echo "🚀 Creating workspace release with GitHub release..."
            pnpm nx release --skip-publish || {
              echo "ℹ️ No release needed"
            }
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Update GitHub release for tag pushes
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "📝 Updating GitHub release for tag ${{ github.ref_name }}"
          # Extract changelog content for this version
          CHANGELOG_CONTENT=$(awk '/^## ${{ github.ref_name }}/, /^## [0-9]/ {if ($0 ~ /^## [0-9]/ && $0 !~ /^## ${{ github.ref_name }}/) exit; if ($0 !~ /^## ${{ github.ref_name }}/) print}' CHANGELOG.md)

          # Update or create the GitHub release
          if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "Release exists, updating..."
            echo "$CHANGELOG_CONTENT" | gh release edit ${{ github.ref_name }} --notes-file -
          else
            echo "Release doesn't exist, creating..."
            echo "$CHANGELOG_CONTENT" | gh release create ${{ github.ref_name }} --title "${{ github.ref_name }}" --notes-file -
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push release commits and tags
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "🏷️ Tag push - no additional push needed"
          else
            echo "📤 Pushing release commits and tags to repository..."
            git push origin main --follow-tags
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to GitHub Pages (main branch only)
  deploy:
    needs: [ci, workspace-quality, release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && success()
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-node-pnpm

      - name: Build production app
        run: |
          echo "🔨 Building production app manually to avoid Nx hanging..."

          # Build dependencies first
          pnpm --filter @academic-explorer/utils build
          pnpm --filter @academic-explorer/client build
          pnpm --filter @academic-explorer/graph build
          pnpm --filter @academic-explorer/simulation build
          pnpm --filter @academic-explorer/ui build

          # Build web app with Vite directly
          cd apps/web && pnpm vite build && cd ../..

          echo "✅ Production build completed"
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Add CNAME file
        run: echo "academic-explorer.joenash.uk" > ./apps/web/dist/CNAME

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./apps/web/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Aggregate status check for branch protection
  ci-success:
    runs-on: ubuntu-latest
    needs: [ci, workspace-quality, extended-checks, release, deploy]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "🏁 =========================================="
          echo "🔍         CI PIPELINE STATUS REPORT      "
          echo "🏁 =========================================="
          echo ""

          # Job status summary with emojis
          echo "📋 Job Status Summary:"
          echo "   🔧 Main CI:           ${{ needs.ci.result }}"
          echo "   🔍 Workspace Quality: ${{ needs.workspace-quality.result }}"
          echo "   🧪 Extended Checks:   ${{ needs.extended-checks.result }}"
          echo "   🚀 Release:           ${{ needs.release.result }}"
          echo "   🌐 Deploy:            ${{ needs.deploy.result }}"
          echo ""

          # Initialize counters
          required_passed=0
          required_total=0
          optional_passed=0
          optional_total=0
          failed_required=false

          # Check REQUIRED jobs (must succeed)
          echo "🛡️  REQUIRED JOBS VALIDATION:"

          # Main CI
          required_total=$((required_total + 1))
          if [[ "${{ needs.ci.result }}" == "success" ]]; then
            echo "   ✅ Main CI job passed"
            required_passed=$((required_passed + 1))
          else
            echo "   ❌ Main CI job failed (CRITICAL FAILURE)"
            failed_required=true
          fi

          # Workspace Quality
          required_total=$((required_total + 1))
          if [[ "${{ needs.workspace-quality.result }}" == "success" ]]; then
            echo "   ✅ Workspace quality checks passed"
            required_passed=$((required_passed + 1))
          else
            echo "   ❌ Workspace quality checks failed (CRITICAL FAILURE)"
            failed_required=true
          fi

          # Release (only on main branch)
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            required_total=$((required_total + 1))
            if [[ "${{ needs.release.result }}" == "success" ]]; then
              echo "   ✅ Release job passed"
              required_passed=$((required_passed + 1))
            elif [[ "${{ needs.release.result }}" == "failure" ]]; then
              echo "   ❌ Release job failed (CRITICAL FAILURE)"
              failed_required=true
            elif [[ "${{ needs.release.result }}" == "skipped" ]]; then
              echo "   ⏭️  Release job skipped (conditional)"
              required_passed=$((required_passed + 1))
            fi
          fi

          echo ""
          echo "📊 OPTIONAL JOBS STATUS:"

          # Extended Checks
          optional_total=$((optional_total + 1))
          if [[ "${{ needs.extended-checks.result }}" == "success" ]]; then
            echo "   ✅ Extended checks passed"
            optional_passed=$((optional_passed + 1))
          elif [[ "${{ needs.extended-checks.result }}" == "failure" ]]; then
            echo "   ⚠️  Extended checks failed (non-blocking)"
          elif [[ "${{ needs.extended-checks.result }}" == "skipped" ]]; then
            echo "   ⏭️  Extended checks skipped (conditional)"
            optional_passed=$((optional_passed + 1))
          fi

          # Deploy
          optional_total=$((optional_total + 1))
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "   ✅ Deploy job passed"
            optional_passed=$((optional_passed + 1))
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "   ⚠️  Deploy job failed (non-blocking)"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "   ⏭️  Deploy skipped (main branch only)"
            optional_passed=$((optional_passed + 1))
          fi

          echo ""
          echo "📈 FINAL SUMMARY:"
          echo "   Required jobs: $required_passed/$required_total passed"
          echo "   Optional jobs: $optional_passed/$optional_total passed"
          echo ""

          # Exit with failure only if required jobs failed
          if [[ "$failed_required" == "true" ]]; then
            echo "💥 =========================================="
            echo "❌         CI PIPELINE FAILED              "
            echo "💥 =========================================="
            echo "🚨 One or more REQUIRED jobs failed"
            echo "🔧 Fix the issues above and try again"
            echo ""
            exit 1
          fi

          echo "🎉 =========================================="
          echo "✅         CI PIPELINE SUCCESSFUL          "
          echo "🎉 =========================================="
          echo "🚀 All required checks passed!"

          if [[ "$optional_passed" -lt "$optional_total" ]]; then
            echo "ℹ️  Note: Some optional jobs failed but pipeline is successful"
          fi
          echo ""