name: Knip Code Cleanup

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no PR creation)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: 20.x
  PNPM_VERSION: 9

jobs:
  knip-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run knip analysis
        id: knip-run
        run: |
          echo "🔍 Running knip analysis..."

          # Run knip and capture output
          if pnpm knip --reporter json > knip-report.json 2>&1; then
            echo "knip_exit_code=0" >> $GITHUB_OUTPUT
            echo "✅ Knip analysis completed successfully"
          else
            echo "knip_exit_code=$?" >> $GITHUB_OUTPUT
            echo "⚠️ Knip found unused code"
          fi

          # Check if knip found any issues
          if [ -s knip-report.json ] && [ "$(jq '.issues | length' knip-report.json 2>/dev/null || echo 0)" -gt 0 ]; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "📊 Knip found unused code to clean up"

            # Generate summary
            UNUSED_FILES=$(jq -r '.issues[] | select(.type == "unlisted") | .file' knip-report.json 2>/dev/null | wc -l || echo 0)
            UNUSED_DEPS=$(jq -r '.issues[] | select(.type == "dependencies") | .dependencies[]?' knip-report.json 2>/dev/null | wc -l || echo 0)
            UNUSED_EXPORTS=$(jq -r '.issues[] | select(.type == "exports") | .exports[]?' knip-report.json 2>/dev/null | wc -l || echo 0)

            echo "unused_files=$UNUSED_FILES" >> $GITHUB_OUTPUT
            echo "unused_deps=$UNUSED_DEPS" >> $GITHUB_OUTPUT
            echo "unused_exports=$UNUSED_EXPORTS" >> $GITHUB_OUTPUT

            # Create human-readable summary
            echo "## 🧹 Knip Analysis Summary" > knip-summary.md
            echo "" >> knip-summary.md
            echo "Knip found the following unused code:" >> knip-summary.md
            echo "- 📁 Unused files: $UNUSED_FILES" >> knip-summary.md
            echo "- 📦 Unused dependencies: $UNUSED_DEPS" >> knip-summary.md
            echo "- 🔗 Unused exports: $UNUSED_EXPORTS" >> knip-summary.md
            echo "" >> knip-summary.md

            if [ "$UNUSED_FILES" -gt 0 ]; then
              echo "### Unused Files" >> knip-summary.md
              jq -r '.issues[] | select(.type == "unlisted") | "- `" + .file + "`"' knip-report.json >> knip-summary.md
              echo "" >> knip-summary.md
            fi

            if [ "$UNUSED_DEPS" -gt 0 ]; then
              echo "### Unused Dependencies" >> knip-summary.md
              jq -r '.issues[] | select(.type == "dependencies") | .dependencies[]? | "- `" + . + "`"' knip-report.json >> knip-summary.md
              echo "" >> knip-summary.md
            fi

            if [ "$UNUSED_EXPORTS" -gt 0 ]; then
              echo "### Unused Exports" >> knip-summary.md
              jq -r '.issues[] | select(.type == "exports") | .exports[]? | "- `" + .symbol + "` in `" + .file + "`"' knip-report.json >> knip-summary.md
            fi
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "✨ No unused code found!"
          fi

      - name: Create cleanup branch
        if: steps.knip-run.outputs.has_issues == 'true' && !inputs.dry_run
        id: create-branch
        run: |
          BRANCH_NAME="chore/knip-cleanup-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git checkout -b "$BRANCH_NAME"
          echo "🌿 Created branch: $BRANCH_NAME"

      - name: Apply knip fixes
        if: steps.knip-run.outputs.has_issues == 'true' && !inputs.dry_run
        id: apply-fixes
        run: |
          echo "🔧 Applying knip fixes..."

          # Apply automatic fixes
          if pnpm knip --fix; then
            echo "✅ Automatic fixes applied successfully"

            # Check if any changes were made
            if git diff --quiet; then
              echo "changes_made=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No changes were made by knip --fix"
            else
              echo "changes_made=true" >> $GITHUB_OUTPUT

              # Stage and commit changes
              git add .
              git commit -m "chore: remove unused code detected by knip

              This commit removes unused code identified by knip analysis:
              - Unused files: ${{ steps.knip-run.outputs.unused_files }}
              - Unused dependencies: ${{ steps.knip-run.outputs.unused_deps }}
              - Unused exports: ${{ steps.knip-run.outputs.unused_exports }}

              Generated automatically by knip-cleanup workflow."

              echo "📝 Changes committed"
            fi
          else
            echo "❌ Failed to apply automatic fixes"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests after cleanup
        if: steps.apply-fixes.outputs.changes_made == 'true'
        run: |
          echo "🧪 Running tests to verify cleanup didn't break anything..."

          # Run the verification pipeline
          if pnpm typecheck && pnpm build && pnpm test && pnpm lint; then
            echo "✅ All tests passed after cleanup"
          else
            echo "❌ Tests failed after cleanup - this may require manual intervention"
            exit 1
          fi

      - name: Push changes
        if: steps.apply-fixes.outputs.changes_made == 'true' && !inputs.dry_run
        run: |
          git push origin "${{ steps.create-branch.outputs.branch_name }}"
          echo "📤 Pushed changes to branch"

      - name: Create Pull Request
        if: steps.apply-fixes.outputs.changes_made == 'true' && !inputs.dry_run
        id: create-pr
        run: |
          # Create PR using GitHub CLI
          PR_TITLE="🧹 chore: automated code cleanup via knip"

          PR_BODY="## 🤖 Automated Code Cleanup

          This PR was automatically created by the knip-cleanup workflow to remove unused code.

          $(cat knip-summary.md)

          ## ✅ Verification

          - [x] Knip analysis completed
          - [x] Automatic fixes applied
          - [x] TypeScript compilation passes
          - [x] Build succeeds
          - [x] Tests pass
          - [x] Linting passes

          ## 📋 Manual Review Needed

          Please review the changes to ensure:
          - No critical code was accidentally removed
          - All functionality still works as expected
          - The cleanup aligns with project goals

          **Note**: This PR was generated automatically. If you don't want automatic knip cleanups, disable the \`knip-cleanup\` workflow.

          ---
          🤖 Generated by [knip-cleanup workflow](.github/workflows/knip-cleanup.yml)"

          PR_URL=$(gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ steps.create-branch.outputs.branch_name }}" \
            --label "automated" \
            --label "chore" \
            --label "knip")

          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "🎉 Created PR: $PR_URL"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add PR comment with details
        if: steps.create-pr.outputs.pr_url != '' && !inputs.dry_run
        run: |
          gh pr comment "${{ steps.create-pr.outputs.pr_url }}" --body "## 📊 Detailed Analysis

          <details>
          <summary>Click to view full knip report</summary>

          \`\`\`json
          $(cat knip-report.json)
          \`\`\`
          </details>

          To run knip locally:
          \`\`\`bash
          pnpm knip                # Analysis only
          pnpm knip --fix         # Apply automatic fixes
          \`\`\`"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output summary
        run: |
          echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.knip-run.outputs.has_issues }}" == "true" ]; then
            echo "🔍 **Knip found unused code**" >> $GITHUB_STEP_SUMMARY
            echo "- Files: ${{ steps.knip-run.outputs.unused_files }}" >> $GITHUB_STEP_SUMMARY
            echo "- Dependencies: ${{ steps.knip-run.outputs.unused_deps }}" >> $GITHUB_STEP_SUMMARY
            echo "- Exports: ${{ steps.knip-run.outputs.unused_exports }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ inputs.dry_run }}" == "true" ]; then
              echo "🚫 **Dry run mode** - No PR was created" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ steps.apply-fixes.outputs.changes_made }}" == "true" ]; then
              echo "✅ **PR created**: ${{ steps.create-pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "ℹ️ **No changes needed** - Knip didn't make any modifications" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✨ **No unused code found** - Repository is clean!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload knip report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: knip-report-${{ github.run_id }}
          path: |
            knip-report.json
            knip-summary.md
          retention-days: 7