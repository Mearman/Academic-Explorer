name: 'Nx Truly Dynamic Jobs'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Analyze and create job plan
  analyze:
    runs-on: ubuntu-latest
    outputs:
      jobs-json: ${{ steps.plan.outputs.jobs-json }}
      has-jobs: ${{ steps.plan.outputs.has-jobs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Nx
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Create execution plan
        id: plan
        run: |
          # Get affected projects
          affected=$(pnpm nx show projects --affected --json || echo '[]')

          if [ "$(echo "$affected" | jq 'length')" -eq 0 ]; then
            echo "has-jobs=false" >> $GITHUB_OUTPUT
            echo "jobs-json={}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Generate dependency graph
          pnpm nx graph --file=graph.json 2>/dev/null || echo '{"dependencies": {}}' > graph.json

          # Create comprehensive job plan
          job_plan=$(cat << 'EOF'
          {
            "lint": {},
            "build": {},
            "test": {}
          }
          EOF
          )

          # Build lint jobs (no dependencies)
          lint_jobs=$(echo "$affected" | jq -r '
            reduce .[] as $proj ({};
              . + {
                ("lint-" + ($proj | gsub("[^a-zA-Z0-9]"; "-") | gsub("^-+|-+$"; ""))): {
                  "project": $proj,
                  "task": "lint",
                  "needs": []
                }
              }
            )
          ')

          # Build build jobs with dependencies
          build_jobs=$(echo "$affected" | jq -r --slurpfile deps graph.json '
            reduce .[] as $proj ({};
              . + {
                ("build-" + ($proj | gsub("[^a-zA-Z0-9]"; "-") | gsub("^-+|-+$"; ""))): {
                  "project": $proj,
                  "task": "build",
                  "needs": (
                    ($deps[0].dependencies[$proj] // []) |
                    map("build-" + (. | gsub("[^a-zA-Z0-9]"; "-") | gsub("^-+|-+$"; "")))
                  )
                }
              }
            )
          ')

          # Build test jobs (depend on build)
          test_jobs=$(echo "$affected" | jq -r '
            reduce .[] as $proj ({};
              . + {
                ("test-" + ($proj | gsub("[^a-zA-Z0-9]"; "-") | gsub("^-+|-+$"; ""))): {
                  "project": $proj,
                  "task": "test",
                  "needs": ["build-" + ($proj | gsub("[^a-zA-Z0-9]"; "-") | gsub("^-+|-+$"; ""))]
                }
              }
            )
          ')

          # Combine all jobs
          all_jobs=$(jq -n --argjson lint "$lint_jobs" --argjson build "$build_jobs" --argjson test "$test_jobs" '
            $lint + $build + $test
          ')

          echo "has-jobs=true" >> $GITHUB_OUTPUT
          echo "jobs-json=$all_jobs" >> $GITHUB_OUTPUT

          echo "=== EXECUTION PLAN ==="
          echo "$all_jobs" | jq -r 'to_entries[] | "\(.key): \(.value.task) \(.value.project) (needs: \(.value.needs | join(", ")))"'

  # Dynamic job executor using fromJson
  execute:
    needs: analyze
    if: needs.analyze.outputs.has-jobs == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job: ${{ fromJson(needs.analyze.outputs.jobs-json) }}
    steps:
      - name: Set job info
        id: job-info
        run: |
          echo "project=${{ matrix.job.project }}" >> $GITHUB_OUTPUT
          echo "task=${{ matrix.job.task }}" >> $GITHUB_OUTPUT
          echo "needs=${{ toJson(matrix.job.needs) }}" >> $GITHUB_OUTPUT

      - name: Wait for dependencies
        if: ${{ toJson(matrix.job.needs) != '[]' }}
        run: |
          echo "This job depends on: ${{ join(matrix.job.needs, ', ') }}"
          echo "In GitHub Actions, dependency waiting is handled by the 'needs' field"
          echo "For this demo, we'll proceed assuming dependencies are handled"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Nx
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml', 'nx.json', '**/project.json') }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Execute Nx task
        run: |
          case "${{ matrix.job.task }}" in
            "lint")
              echo "Running lint for ${{ matrix.job.project }}"
              pnpm nx lint "${{ matrix.job.project }}"
              ;;
            "build")
              echo "Running build for ${{ matrix.job.project }}"
              pnpm nx build "${{ matrix.job.project }}"
              ;;
            "test")
              echo "Running test for ${{ matrix.job.project }}"
              pnpm nx test "${{ matrix.job.project }}"
              ;;
            *)
              echo "Unknown task: ${{ matrix.job.task }}"
              exit 1
              ;;
          esac
        env: ${{ matrix.job.task == 'test' && '{"NODE_OPTIONS": "--max-old-space-size=8192"}' || '{}' }}

  # Quality checks
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Check for unused dependencies
        run: pnpm knip

  # Final status
  complete:
    needs: [analyze, execute, quality]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Report status
        run: |
          echo "=== CI EXECUTION SUMMARY ==="
          echo "Jobs analyzed: ${{ needs.analyze.result }}"
          echo "Jobs executed: ${{ needs.execute.result }}"
          echo "Quality checks: ${{ needs.quality.result }}"

          if [[ "${{ needs.analyze.outputs.has-jobs }}" == "false" ]]; then
            echo "No affected projects found"
            exit 0
          fi

          # Check for failures
          if [[ "${{ needs.execute.result }}" == "failure" || "${{ needs.quality.result }}" == "failure" ]]; then
            echo "Some jobs failed"
            exit 1
          fi

          echo "All jobs completed successfully!"