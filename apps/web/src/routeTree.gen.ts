/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as HistoryRouteImport } from './routes/history'
import { Route as ExploreRouteImport } from './routes/explore'
import { Route as EvaluationRouteImport } from './routes/evaluation'
import { Route as ErrorTestRouteImport } from './routes/error-test'
import { Route as CacheRouteImport } from './routes/cache'
import { Route as BrowseRouteImport } from './routes/browse'
import { Route as BookmarksRouteImport } from './routes/bookmarks'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ExternalIdRouteImport } from './routes/$externalId'
import { Route as SplatRouteImport } from './routes/$_'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorksIndexRouteImport } from './routes/works/index'
import { Route as TopicsIndexRouteImport } from './routes/topics/index'
import { Route as TextIndexRouteImport } from './routes/text/index'
import { Route as SourcesIndexRouteImport } from './routes/sources/index'
import { Route as PublishersIndexRouteImport } from './routes/publishers/index'
import { Route as KeywordsIndexRouteImport } from './routes/keywords/index'
import { Route as InstitutionsIndexRouteImport } from './routes/institutions/index'
import { Route as FundersIndexRouteImport } from './routes/funders/index'
import { Route as ConceptsIndexRouteImport } from './routes/concepts/index'
import { Route as AutocompleteIndexRouteImport } from './routes/autocomplete/index'
import { Route as AuthorsIndexRouteImport } from './routes/authors/index'
import { Route as WorksWorkIdRouteImport } from './routes/works/$workId'
import { Route as TopicsTopicIdRouteImport } from './routes/topics/$topicId'
import { Route as SourcesSourceIdRouteImport } from './routes/sources/$sourceId'
import { Route as OpenalexUrlSplatRouteImport } from './routes/openalex-url/$'
import { Route as InstitutionsInstitutionIdRouteImport } from './routes/institutions/$institutionId'
import { Route as HttpsSplatRouteImport } from './routes/https/$'
import { Route as FundersFunderIdRouteImport } from './routes/funders/$funderId'
import { Route as ExploreGraphRouteImport } from './routes/explore/graph'
import { Route as EvaluationResultsRouteImport } from './routes/evaluation/results'
import { Route as EvaluationDatasetsRouteImport } from './routes/evaluation/datasets'
import { Route as AuthorsAuthorIdRouteImport } from './routes/authors/$authorId'
import { Route as ApiOpenalexOrgSplatRouteImport } from './routes/api-openalex-org/$'
import { Route as TextTopicsIndexRouteImport } from './routes/text/topics/index'
import { Route as TextKeywordsIndexRouteImport } from './routes/text/keywords/index'
import { Route as TextConceptsIndexRouteImport } from './routes/text/concepts/index'
import { Route as AutocompleteWorksIndexRouteImport } from './routes/autocomplete/works/index'
import { Route as AutocompleteSourcesIndexRouteImport } from './routes/autocomplete/sources/index'
import { Route as AutocompletePublishersIndexRouteImport } from './routes/autocomplete/publishers/index'
import { Route as AutocompleteInstitutionsIndexRouteImport } from './routes/autocomplete/institutions/index'
import { Route as AutocompleteFundersIndexRouteImport } from './routes/autocomplete/funders/index'
import { Route as AutocompleteConceptsIndexRouteImport } from './routes/autocomplete/concepts/index'
import { Route as AutocompleteAuthorsIndexRouteImport } from './routes/autocomplete/authors/index'
import { Route as WorksDoiDoiRouteImport } from './routes/works/doi.$doi'
import { Route as SourcesIssnIssnRouteImport } from './routes/sources/issn.$issn'
import { Route as OpenalexOrgSplatRouteImport } from './routes/openalex.org/$'
import { Route as InstitutionsRorRorRouteImport } from './routes/institutions/ror.$ror'
import { Route as AuthorsOrcidOrcidRouteImport } from './routes/authors/orcid.$orcid'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoryRoute = HistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreRoute = ExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluationRoute = EvaluationRouteImport.update({
  id: '/evaluation',
  path: '/evaluation',
  getParentRoute: () => rootRouteImport,
} as any)
const ErrorTestRoute = ErrorTestRouteImport.update({
  id: '/error-test',
  path: '/error-test',
  getParentRoute: () => rootRouteImport,
} as any)
const CacheRoute = CacheRouteImport.update({
  id: '/cache',
  path: '/cache',
  getParentRoute: () => rootRouteImport,
} as any)
const BrowseRoute = BrowseRouteImport.update({
  id: '/browse',
  path: '/browse',
  getParentRoute: () => rootRouteImport,
} as any)
const BookmarksRoute = BookmarksRouteImport.update({
  id: '/bookmarks',
  path: '/bookmarks',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ExternalIdRoute = ExternalIdRouteImport.update({
  id: '/$externalId',
  path: '/$externalId',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$_',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorksIndexRoute = WorksIndexRouteImport.update({
  id: '/works/',
  path: '/works/',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsIndexRoute = TopicsIndexRouteImport.update({
  id: '/topics/',
  path: '/topics/',
  getParentRoute: () => rootRouteImport,
} as any)
const TextIndexRoute = TextIndexRouteImport.update({
  id: '/text/',
  path: '/text/',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesIndexRoute = SourcesIndexRouteImport.update({
  id: '/sources/',
  path: '/sources/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublishersIndexRoute = PublishersIndexRouteImport.update({
  id: '/publishers/',
  path: '/publishers/',
  getParentRoute: () => rootRouteImport,
} as any)
const KeywordsIndexRoute = KeywordsIndexRouteImport.update({
  id: '/keywords/',
  path: '/keywords/',
  getParentRoute: () => rootRouteImport,
} as any)
const InstitutionsIndexRoute = InstitutionsIndexRouteImport.update({
  id: '/institutions/',
  path: '/institutions/',
  getParentRoute: () => rootRouteImport,
} as any)
const FundersIndexRoute = FundersIndexRouteImport.update({
  id: '/funders/',
  path: '/funders/',
  getParentRoute: () => rootRouteImport,
} as any)
const ConceptsIndexRoute = ConceptsIndexRouteImport.update({
  id: '/concepts/',
  path: '/concepts/',
  getParentRoute: () => rootRouteImport,
} as any)
const AutocompleteIndexRoute = AutocompleteIndexRouteImport.update({
  id: '/autocomplete/',
  path: '/autocomplete/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorsIndexRoute = AuthorsIndexRouteImport.update({
  id: '/authors/',
  path: '/authors/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorksWorkIdRoute = WorksWorkIdRouteImport.update({
  id: '/works/$workId',
  path: '/works/$workId',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsTopicIdRoute = TopicsTopicIdRouteImport.update({
  id: '/topics/$topicId',
  path: '/topics/$topicId',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesSourceIdRoute = SourcesSourceIdRouteImport.update({
  id: '/sources/$sourceId',
  path: '/sources/$sourceId',
  getParentRoute: () => rootRouteImport,
} as any)
const OpenalexUrlSplatRoute = OpenalexUrlSplatRouteImport.update({
  id: '/openalex-url/$',
  path: '/openalex-url/$',
  getParentRoute: () => rootRouteImport,
} as any)
const InstitutionsInstitutionIdRoute =
  InstitutionsInstitutionIdRouteImport.update({
    id: '/institutions/$institutionId',
    path: '/institutions/$institutionId',
    getParentRoute: () => rootRouteImport,
  } as any)
const HttpsSplatRoute = HttpsSplatRouteImport.update({
  id: '/https/$',
  path: '/https/$',
  getParentRoute: () => rootRouteImport,
} as any)
const FundersFunderIdRoute = FundersFunderIdRouteImport.update({
  id: '/funders/$funderId',
  path: '/funders/$funderId',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreGraphRoute = ExploreGraphRouteImport.update({
  id: '/graph',
  path: '/graph',
  getParentRoute: () => ExploreRoute,
} as any)
const EvaluationResultsRoute = EvaluationResultsRouteImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => EvaluationRoute,
} as any)
const EvaluationDatasetsRoute = EvaluationDatasetsRouteImport.update({
  id: '/datasets',
  path: '/datasets',
  getParentRoute: () => EvaluationRoute,
} as any)
const AuthorsAuthorIdRoute = AuthorsAuthorIdRouteImport.update({
  id: '/authors/$authorId',
  path: '/authors/$authorId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiOpenalexOrgSplatRoute = ApiOpenalexOrgSplatRouteImport.update({
  id: '/api-openalex-org/$',
  path: '/api-openalex-org/$',
  getParentRoute: () => rootRouteImport,
} as any)
const TextTopicsIndexRoute = TextTopicsIndexRouteImport.update({
  id: '/text/topics/',
  path: '/text/topics/',
  getParentRoute: () => rootRouteImport,
} as any)
const TextKeywordsIndexRoute = TextKeywordsIndexRouteImport.update({
  id: '/text/keywords/',
  path: '/text/keywords/',
  getParentRoute: () => rootRouteImport,
} as any)
const TextConceptsIndexRoute = TextConceptsIndexRouteImport.update({
  id: '/text/concepts/',
  path: '/text/concepts/',
  getParentRoute: () => rootRouteImport,
} as any)
const AutocompleteWorksIndexRoute = AutocompleteWorksIndexRouteImport.update({
  id: '/autocomplete/works/',
  path: '/autocomplete/works/',
  getParentRoute: () => rootRouteImport,
} as any)
const AutocompleteSourcesIndexRoute =
  AutocompleteSourcesIndexRouteImport.update({
    id: '/autocomplete/sources/',
    path: '/autocomplete/sources/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AutocompletePublishersIndexRoute =
  AutocompletePublishersIndexRouteImport.update({
    id: '/autocomplete/publishers/',
    path: '/autocomplete/publishers/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AutocompleteInstitutionsIndexRoute =
  AutocompleteInstitutionsIndexRouteImport.update({
    id: '/autocomplete/institutions/',
    path: '/autocomplete/institutions/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AutocompleteFundersIndexRoute =
  AutocompleteFundersIndexRouteImport.update({
    id: '/autocomplete/funders/',
    path: '/autocomplete/funders/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AutocompleteConceptsIndexRoute =
  AutocompleteConceptsIndexRouteImport.update({
    id: '/autocomplete/concepts/',
    path: '/autocomplete/concepts/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AutocompleteAuthorsIndexRoute =
  AutocompleteAuthorsIndexRouteImport.update({
    id: '/autocomplete/authors/',
    path: '/autocomplete/authors/',
    getParentRoute: () => rootRouteImport,
  } as any)
const WorksDoiDoiRoute = WorksDoiDoiRouteImport.update({
  id: '/works/doi/$doi',
  path: '/works/doi/$doi',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesIssnIssnRoute = SourcesIssnIssnRouteImport.update({
  id: '/sources/issn/$issn',
  path: '/sources/issn/$issn',
  getParentRoute: () => rootRouteImport,
} as any)
const OpenalexOrgSplatRoute = OpenalexOrgSplatRouteImport.update({
  id: '/openalex/org/$',
  path: '/openalex/org/$',
  getParentRoute: () => rootRouteImport,
} as any)
const InstitutionsRorRorRoute = InstitutionsRorRorRouteImport.update({
  id: '/institutions/ror/$ror',
  path: '/institutions/ror/$ror',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorsOrcidOrcidRoute = AuthorsOrcidOrcidRouteImport.update({
  id: '/authors/orcid/$orcid',
  path: '/authors/orcid/$orcid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/$externalId': typeof ExternalIdRoute
  '/about': typeof AboutRoute
  '/bookmarks': typeof BookmarksRoute
  '/browse': typeof BrowseRoute
  '/cache': typeof CacheRoute
  '/error-test': typeof ErrorTestRoute
  '/evaluation': typeof EvaluationRouteWithChildren
  '/explore': typeof ExploreRouteWithChildren
  '/history': typeof HistoryRoute
  '/search': typeof SearchRoute
  '/api-openalex-org/$': typeof ApiOpenalexOrgSplatRoute
  '/authors/$authorId': typeof AuthorsAuthorIdRoute
  '/evaluation/datasets': typeof EvaluationDatasetsRoute
  '/evaluation/results': typeof EvaluationResultsRoute
  '/explore/graph': typeof ExploreGraphRoute
  '/funders/$funderId': typeof FundersFunderIdRoute
  '/https/$': typeof HttpsSplatRoute
  '/institutions/$institutionId': typeof InstitutionsInstitutionIdRoute
  '/openalex-url/$': typeof OpenalexUrlSplatRoute
  '/sources/$sourceId': typeof SourcesSourceIdRoute
  '/topics/$topicId': typeof TopicsTopicIdRoute
  '/works/$workId': typeof WorksWorkIdRoute
  '/authors': typeof AuthorsIndexRoute
  '/autocomplete': typeof AutocompleteIndexRoute
  '/concepts': typeof ConceptsIndexRoute
  '/funders': typeof FundersIndexRoute
  '/institutions': typeof InstitutionsIndexRoute
  '/keywords': typeof KeywordsIndexRoute
  '/publishers': typeof PublishersIndexRoute
  '/sources': typeof SourcesIndexRoute
  '/text': typeof TextIndexRoute
  '/topics': typeof TopicsIndexRoute
  '/works': typeof WorksIndexRoute
  '/authors/orcid/$orcid': typeof AuthorsOrcidOrcidRoute
  '/institutions/ror/$ror': typeof InstitutionsRorRorRoute
  '/openalex/org/$': typeof OpenalexOrgSplatRoute
  '/sources/issn/$issn': typeof SourcesIssnIssnRoute
  '/works/doi/$doi': typeof WorksDoiDoiRoute
  '/autocomplete/authors': typeof AutocompleteAuthorsIndexRoute
  '/autocomplete/concepts': typeof AutocompleteConceptsIndexRoute
  '/autocomplete/funders': typeof AutocompleteFundersIndexRoute
  '/autocomplete/institutions': typeof AutocompleteInstitutionsIndexRoute
  '/autocomplete/publishers': typeof AutocompletePublishersIndexRoute
  '/autocomplete/sources': typeof AutocompleteSourcesIndexRoute
  '/autocomplete/works': typeof AutocompleteWorksIndexRoute
  '/text/concepts': typeof TextConceptsIndexRoute
  '/text/keywords': typeof TextKeywordsIndexRoute
  '/text/topics': typeof TextTopicsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/$externalId': typeof ExternalIdRoute
  '/about': typeof AboutRoute
  '/bookmarks': typeof BookmarksRoute
  '/browse': typeof BrowseRoute
  '/cache': typeof CacheRoute
  '/error-test': typeof ErrorTestRoute
  '/evaluation': typeof EvaluationRouteWithChildren
  '/explore': typeof ExploreRouteWithChildren
  '/history': typeof HistoryRoute
  '/search': typeof SearchRoute
  '/api-openalex-org/$': typeof ApiOpenalexOrgSplatRoute
  '/authors/$authorId': typeof AuthorsAuthorIdRoute
  '/evaluation/datasets': typeof EvaluationDatasetsRoute
  '/evaluation/results': typeof EvaluationResultsRoute
  '/explore/graph': typeof ExploreGraphRoute
  '/funders/$funderId': typeof FundersFunderIdRoute
  '/https/$': typeof HttpsSplatRoute
  '/institutions/$institutionId': typeof InstitutionsInstitutionIdRoute
  '/openalex-url/$': typeof OpenalexUrlSplatRoute
  '/sources/$sourceId': typeof SourcesSourceIdRoute
  '/topics/$topicId': typeof TopicsTopicIdRoute
  '/works/$workId': typeof WorksWorkIdRoute
  '/authors': typeof AuthorsIndexRoute
  '/autocomplete': typeof AutocompleteIndexRoute
  '/concepts': typeof ConceptsIndexRoute
  '/funders': typeof FundersIndexRoute
  '/institutions': typeof InstitutionsIndexRoute
  '/keywords': typeof KeywordsIndexRoute
  '/publishers': typeof PublishersIndexRoute
  '/sources': typeof SourcesIndexRoute
  '/text': typeof TextIndexRoute
  '/topics': typeof TopicsIndexRoute
  '/works': typeof WorksIndexRoute
  '/authors/orcid/$orcid': typeof AuthorsOrcidOrcidRoute
  '/institutions/ror/$ror': typeof InstitutionsRorRorRoute
  '/openalex/org/$': typeof OpenalexOrgSplatRoute
  '/sources/issn/$issn': typeof SourcesIssnIssnRoute
  '/works/doi/$doi': typeof WorksDoiDoiRoute
  '/autocomplete/authors': typeof AutocompleteAuthorsIndexRoute
  '/autocomplete/concepts': typeof AutocompleteConceptsIndexRoute
  '/autocomplete/funders': typeof AutocompleteFundersIndexRoute
  '/autocomplete/institutions': typeof AutocompleteInstitutionsIndexRoute
  '/autocomplete/publishers': typeof AutocompletePublishersIndexRoute
  '/autocomplete/sources': typeof AutocompleteSourcesIndexRoute
  '/autocomplete/works': typeof AutocompleteWorksIndexRoute
  '/text/concepts': typeof TextConceptsIndexRoute
  '/text/keywords': typeof TextKeywordsIndexRoute
  '/text/topics': typeof TextTopicsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$_': typeof SplatRoute
  '/$externalId': typeof ExternalIdRoute
  '/about': typeof AboutRoute
  '/bookmarks': typeof BookmarksRoute
  '/browse': typeof BrowseRoute
  '/cache': typeof CacheRoute
  '/error-test': typeof ErrorTestRoute
  '/evaluation': typeof EvaluationRouteWithChildren
  '/explore': typeof ExploreRouteWithChildren
  '/history': typeof HistoryRoute
  '/search': typeof SearchRoute
  '/api-openalex-org/$': typeof ApiOpenalexOrgSplatRoute
  '/authors/$authorId': typeof AuthorsAuthorIdRoute
  '/evaluation/datasets': typeof EvaluationDatasetsRoute
  '/evaluation/results': typeof EvaluationResultsRoute
  '/explore/graph': typeof ExploreGraphRoute
  '/funders/$funderId': typeof FundersFunderIdRoute
  '/https/$': typeof HttpsSplatRoute
  '/institutions/$institutionId': typeof InstitutionsInstitutionIdRoute
  '/openalex-url/$': typeof OpenalexUrlSplatRoute
  '/sources/$sourceId': typeof SourcesSourceIdRoute
  '/topics/$topicId': typeof TopicsTopicIdRoute
  '/works/$workId': typeof WorksWorkIdRoute
  '/authors/': typeof AuthorsIndexRoute
  '/autocomplete/': typeof AutocompleteIndexRoute
  '/concepts/': typeof ConceptsIndexRoute
  '/funders/': typeof FundersIndexRoute
  '/institutions/': typeof InstitutionsIndexRoute
  '/keywords/': typeof KeywordsIndexRoute
  '/publishers/': typeof PublishersIndexRoute
  '/sources/': typeof SourcesIndexRoute
  '/text/': typeof TextIndexRoute
  '/topics/': typeof TopicsIndexRoute
  '/works/': typeof WorksIndexRoute
  '/authors/orcid/$orcid': typeof AuthorsOrcidOrcidRoute
  '/institutions/ror/$ror': typeof InstitutionsRorRorRoute
  '/openalex/org/$': typeof OpenalexOrgSplatRoute
  '/sources/issn/$issn': typeof SourcesIssnIssnRoute
  '/works/doi/$doi': typeof WorksDoiDoiRoute
  '/autocomplete/authors/': typeof AutocompleteAuthorsIndexRoute
  '/autocomplete/concepts/': typeof AutocompleteConceptsIndexRoute
  '/autocomplete/funders/': typeof AutocompleteFundersIndexRoute
  '/autocomplete/institutions/': typeof AutocompleteInstitutionsIndexRoute
  '/autocomplete/publishers/': typeof AutocompletePublishersIndexRoute
  '/autocomplete/sources/': typeof AutocompleteSourcesIndexRoute
  '/autocomplete/works/': typeof AutocompleteWorksIndexRoute
  '/text/concepts/': typeof TextConceptsIndexRoute
  '/text/keywords/': typeof TextKeywordsIndexRoute
  '/text/topics/': typeof TextTopicsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/$externalId'
    | '/about'
    | '/bookmarks'
    | '/browse'
    | '/cache'
    | '/error-test'
    | '/evaluation'
    | '/explore'
    | '/history'
    | '/search'
    | '/api-openalex-org/$'
    | '/authors/$authorId'
    | '/evaluation/datasets'
    | '/evaluation/results'
    | '/explore/graph'
    | '/funders/$funderId'
    | '/https/$'
    | '/institutions/$institutionId'
    | '/openalex-url/$'
    | '/sources/$sourceId'
    | '/topics/$topicId'
    | '/works/$workId'
    | '/authors'
    | '/autocomplete'
    | '/concepts'
    | '/funders'
    | '/institutions'
    | '/keywords'
    | '/publishers'
    | '/sources'
    | '/text'
    | '/topics'
    | '/works'
    | '/authors/orcid/$orcid'
    | '/institutions/ror/$ror'
    | '/openalex/org/$'
    | '/sources/issn/$issn'
    | '/works/doi/$doi'
    | '/autocomplete/authors'
    | '/autocomplete/concepts'
    | '/autocomplete/funders'
    | '/autocomplete/institutions'
    | '/autocomplete/publishers'
    | '/autocomplete/sources'
    | '/autocomplete/works'
    | '/text/concepts'
    | '/text/keywords'
    | '/text/topics'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/$externalId'
    | '/about'
    | '/bookmarks'
    | '/browse'
    | '/cache'
    | '/error-test'
    | '/evaluation'
    | '/explore'
    | '/history'
    | '/search'
    | '/api-openalex-org/$'
    | '/authors/$authorId'
    | '/evaluation/datasets'
    | '/evaluation/results'
    | '/explore/graph'
    | '/funders/$funderId'
    | '/https/$'
    | '/institutions/$institutionId'
    | '/openalex-url/$'
    | '/sources/$sourceId'
    | '/topics/$topicId'
    | '/works/$workId'
    | '/authors'
    | '/autocomplete'
    | '/concepts'
    | '/funders'
    | '/institutions'
    | '/keywords'
    | '/publishers'
    | '/sources'
    | '/text'
    | '/topics'
    | '/works'
    | '/authors/orcid/$orcid'
    | '/institutions/ror/$ror'
    | '/openalex/org/$'
    | '/sources/issn/$issn'
    | '/works/doi/$doi'
    | '/autocomplete/authors'
    | '/autocomplete/concepts'
    | '/autocomplete/funders'
    | '/autocomplete/institutions'
    | '/autocomplete/publishers'
    | '/autocomplete/sources'
    | '/autocomplete/works'
    | '/text/concepts'
    | '/text/keywords'
    | '/text/topics'
  id:
    | '__root__'
    | '/'
    | '/$_'
    | '/$externalId'
    | '/about'
    | '/bookmarks'
    | '/browse'
    | '/cache'
    | '/error-test'
    | '/evaluation'
    | '/explore'
    | '/history'
    | '/search'
    | '/api-openalex-org/$'
    | '/authors/$authorId'
    | '/evaluation/datasets'
    | '/evaluation/results'
    | '/explore/graph'
    | '/funders/$funderId'
    | '/https/$'
    | '/institutions/$institutionId'
    | '/openalex-url/$'
    | '/sources/$sourceId'
    | '/topics/$topicId'
    | '/works/$workId'
    | '/authors/'
    | '/autocomplete/'
    | '/concepts/'
    | '/funders/'
    | '/institutions/'
    | '/keywords/'
    | '/publishers/'
    | '/sources/'
    | '/text/'
    | '/topics/'
    | '/works/'
    | '/authors/orcid/$orcid'
    | '/institutions/ror/$ror'
    | '/openalex/org/$'
    | '/sources/issn/$issn'
    | '/works/doi/$doi'
    | '/autocomplete/authors/'
    | '/autocomplete/concepts/'
    | '/autocomplete/funders/'
    | '/autocomplete/institutions/'
    | '/autocomplete/publishers/'
    | '/autocomplete/sources/'
    | '/autocomplete/works/'
    | '/text/concepts/'
    | '/text/keywords/'
    | '/text/topics/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  ExternalIdRoute: typeof ExternalIdRoute
  AboutRoute: typeof AboutRoute
  BookmarksRoute: typeof BookmarksRoute
  BrowseRoute: typeof BrowseRoute
  CacheRoute: typeof CacheRoute
  ErrorTestRoute: typeof ErrorTestRoute
  EvaluationRoute: typeof EvaluationRouteWithChildren
  ExploreRoute: typeof ExploreRouteWithChildren
  HistoryRoute: typeof HistoryRoute
  SearchRoute: typeof SearchRoute
  ApiOpenalexOrgSplatRoute: typeof ApiOpenalexOrgSplatRoute
  AuthorsAuthorIdRoute: typeof AuthorsAuthorIdRoute
  FundersFunderIdRoute: typeof FundersFunderIdRoute
  HttpsSplatRoute: typeof HttpsSplatRoute
  InstitutionsInstitutionIdRoute: typeof InstitutionsInstitutionIdRoute
  OpenalexUrlSplatRoute: typeof OpenalexUrlSplatRoute
  SourcesSourceIdRoute: typeof SourcesSourceIdRoute
  TopicsTopicIdRoute: typeof TopicsTopicIdRoute
  WorksWorkIdRoute: typeof WorksWorkIdRoute
  AuthorsIndexRoute: typeof AuthorsIndexRoute
  AutocompleteIndexRoute: typeof AutocompleteIndexRoute
  ConceptsIndexRoute: typeof ConceptsIndexRoute
  FundersIndexRoute: typeof FundersIndexRoute
  InstitutionsIndexRoute: typeof InstitutionsIndexRoute
  KeywordsIndexRoute: typeof KeywordsIndexRoute
  PublishersIndexRoute: typeof PublishersIndexRoute
  SourcesIndexRoute: typeof SourcesIndexRoute
  TextIndexRoute: typeof TextIndexRoute
  TopicsIndexRoute: typeof TopicsIndexRoute
  WorksIndexRoute: typeof WorksIndexRoute
  AuthorsOrcidOrcidRoute: typeof AuthorsOrcidOrcidRoute
  InstitutionsRorRorRoute: typeof InstitutionsRorRorRoute
  OpenalexOrgSplatRoute: typeof OpenalexOrgSplatRoute
  SourcesIssnIssnRoute: typeof SourcesIssnIssnRoute
  WorksDoiDoiRoute: typeof WorksDoiDoiRoute
  AutocompleteAuthorsIndexRoute: typeof AutocompleteAuthorsIndexRoute
  AutocompleteConceptsIndexRoute: typeof AutocompleteConceptsIndexRoute
  AutocompleteFundersIndexRoute: typeof AutocompleteFundersIndexRoute
  AutocompleteInstitutionsIndexRoute: typeof AutocompleteInstitutionsIndexRoute
  AutocompletePublishersIndexRoute: typeof AutocompletePublishersIndexRoute
  AutocompleteSourcesIndexRoute: typeof AutocompleteSourcesIndexRoute
  AutocompleteWorksIndexRoute: typeof AutocompleteWorksIndexRoute
  TextConceptsIndexRoute: typeof TextConceptsIndexRoute
  TextKeywordsIndexRoute: typeof TextKeywordsIndexRoute
  TextTopicsIndexRoute: typeof TextTopicsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evaluation': {
      id: '/evaluation'
      path: '/evaluation'
      fullPath: '/evaluation'
      preLoaderRoute: typeof EvaluationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/error-test': {
      id: '/error-test'
      path: '/error-test'
      fullPath: '/error-test'
      preLoaderRoute: typeof ErrorTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cache': {
      id: '/cache'
      path: '/cache'
      fullPath: '/cache'
      preLoaderRoute: typeof CacheRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/browse': {
      id: '/browse'
      path: '/browse'
      fullPath: '/browse'
      preLoaderRoute: typeof BrowseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookmarks': {
      id: '/bookmarks'
      path: '/bookmarks'
      fullPath: '/bookmarks'
      preLoaderRoute: typeof BookmarksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$externalId': {
      id: '/$externalId'
      path: '/$externalId'
      fullPath: '/$externalId'
      preLoaderRoute: typeof ExternalIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$_': {
      id: '/$_'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/works/': {
      id: '/works/'
      path: '/works'
      fullPath: '/works'
      preLoaderRoute: typeof WorksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/': {
      id: '/topics/'
      path: '/topics'
      fullPath: '/topics'
      preLoaderRoute: typeof TopicsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/text/': {
      id: '/text/'
      path: '/text'
      fullPath: '/text'
      preLoaderRoute: typeof TextIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources/': {
      id: '/sources/'
      path: '/sources'
      fullPath: '/sources'
      preLoaderRoute: typeof SourcesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/publishers/': {
      id: '/publishers/'
      path: '/publishers'
      fullPath: '/publishers'
      preLoaderRoute: typeof PublishersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/keywords/': {
      id: '/keywords/'
      path: '/keywords'
      fullPath: '/keywords'
      preLoaderRoute: typeof KeywordsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/institutions/': {
      id: '/institutions/'
      path: '/institutions'
      fullPath: '/institutions'
      preLoaderRoute: typeof InstitutionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/funders/': {
      id: '/funders/'
      path: '/funders'
      fullPath: '/funders'
      preLoaderRoute: typeof FundersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/concepts/': {
      id: '/concepts/'
      path: '/concepts'
      fullPath: '/concepts'
      preLoaderRoute: typeof ConceptsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/': {
      id: '/autocomplete/'
      path: '/autocomplete'
      fullPath: '/autocomplete'
      preLoaderRoute: typeof AutocompleteIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authors/': {
      id: '/authors/'
      path: '/authors'
      fullPath: '/authors'
      preLoaderRoute: typeof AuthorsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/works/$workId': {
      id: '/works/$workId'
      path: '/works/$workId'
      fullPath: '/works/$workId'
      preLoaderRoute: typeof WorksWorkIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/$topicId': {
      id: '/topics/$topicId'
      path: '/topics/$topicId'
      fullPath: '/topics/$topicId'
      preLoaderRoute: typeof TopicsTopicIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources/$sourceId': {
      id: '/sources/$sourceId'
      path: '/sources/$sourceId'
      fullPath: '/sources/$sourceId'
      preLoaderRoute: typeof SourcesSourceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/openalex-url/$': {
      id: '/openalex-url/$'
      path: '/openalex-url/$'
      fullPath: '/openalex-url/$'
      preLoaderRoute: typeof OpenalexUrlSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/institutions/$institutionId': {
      id: '/institutions/$institutionId'
      path: '/institutions/$institutionId'
      fullPath: '/institutions/$institutionId'
      preLoaderRoute: typeof InstitutionsInstitutionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/https/$': {
      id: '/https/$'
      path: '/https/$'
      fullPath: '/https/$'
      preLoaderRoute: typeof HttpsSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/funders/$funderId': {
      id: '/funders/$funderId'
      path: '/funders/$funderId'
      fullPath: '/funders/$funderId'
      preLoaderRoute: typeof FundersFunderIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore/graph': {
      id: '/explore/graph'
      path: '/graph'
      fullPath: '/explore/graph'
      preLoaderRoute: typeof ExploreGraphRouteImport
      parentRoute: typeof ExploreRoute
    }
    '/evaluation/results': {
      id: '/evaluation/results'
      path: '/results'
      fullPath: '/evaluation/results'
      preLoaderRoute: typeof EvaluationResultsRouteImport
      parentRoute: typeof EvaluationRoute
    }
    '/evaluation/datasets': {
      id: '/evaluation/datasets'
      path: '/datasets'
      fullPath: '/evaluation/datasets'
      preLoaderRoute: typeof EvaluationDatasetsRouteImport
      parentRoute: typeof EvaluationRoute
    }
    '/authors/$authorId': {
      id: '/authors/$authorId'
      path: '/authors/$authorId'
      fullPath: '/authors/$authorId'
      preLoaderRoute: typeof AuthorsAuthorIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-openalex-org/$': {
      id: '/api-openalex-org/$'
      path: '/api-openalex-org/$'
      fullPath: '/api-openalex-org/$'
      preLoaderRoute: typeof ApiOpenalexOrgSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/text/topics/': {
      id: '/text/topics/'
      path: '/text/topics'
      fullPath: '/text/topics'
      preLoaderRoute: typeof TextTopicsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/text/keywords/': {
      id: '/text/keywords/'
      path: '/text/keywords'
      fullPath: '/text/keywords'
      preLoaderRoute: typeof TextKeywordsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/text/concepts/': {
      id: '/text/concepts/'
      path: '/text/concepts'
      fullPath: '/text/concepts'
      preLoaderRoute: typeof TextConceptsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/works/': {
      id: '/autocomplete/works/'
      path: '/autocomplete/works'
      fullPath: '/autocomplete/works'
      preLoaderRoute: typeof AutocompleteWorksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/sources/': {
      id: '/autocomplete/sources/'
      path: '/autocomplete/sources'
      fullPath: '/autocomplete/sources'
      preLoaderRoute: typeof AutocompleteSourcesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/publishers/': {
      id: '/autocomplete/publishers/'
      path: '/autocomplete/publishers'
      fullPath: '/autocomplete/publishers'
      preLoaderRoute: typeof AutocompletePublishersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/institutions/': {
      id: '/autocomplete/institutions/'
      path: '/autocomplete/institutions'
      fullPath: '/autocomplete/institutions'
      preLoaderRoute: typeof AutocompleteInstitutionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/funders/': {
      id: '/autocomplete/funders/'
      path: '/autocomplete/funders'
      fullPath: '/autocomplete/funders'
      preLoaderRoute: typeof AutocompleteFundersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/concepts/': {
      id: '/autocomplete/concepts/'
      path: '/autocomplete/concepts'
      fullPath: '/autocomplete/concepts'
      preLoaderRoute: typeof AutocompleteConceptsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/autocomplete/authors/': {
      id: '/autocomplete/authors/'
      path: '/autocomplete/authors'
      fullPath: '/autocomplete/authors'
      preLoaderRoute: typeof AutocompleteAuthorsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/works/doi/$doi': {
      id: '/works/doi/$doi'
      path: '/works/doi/$doi'
      fullPath: '/works/doi/$doi'
      preLoaderRoute: typeof WorksDoiDoiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources/issn/$issn': {
      id: '/sources/issn/$issn'
      path: '/sources/issn/$issn'
      fullPath: '/sources/issn/$issn'
      preLoaderRoute: typeof SourcesIssnIssnRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/openalex/org/$': {
      id: '/openalex/org/$'
      path: '/openalex/org/$'
      fullPath: '/openalex/org/$'
      preLoaderRoute: typeof OpenalexOrgSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/institutions/ror/$ror': {
      id: '/institutions/ror/$ror'
      path: '/institutions/ror/$ror'
      fullPath: '/institutions/ror/$ror'
      preLoaderRoute: typeof InstitutionsRorRorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authors/orcid/$orcid': {
      id: '/authors/orcid/$orcid'
      path: '/authors/orcid/$orcid'
      fullPath: '/authors/orcid/$orcid'
      preLoaderRoute: typeof AuthorsOrcidOrcidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface EvaluationRouteChildren {
  EvaluationDatasetsRoute: typeof EvaluationDatasetsRoute
  EvaluationResultsRoute: typeof EvaluationResultsRoute
}

const EvaluationRouteChildren: EvaluationRouteChildren = {
  EvaluationDatasetsRoute: EvaluationDatasetsRoute,
  EvaluationResultsRoute: EvaluationResultsRoute,
}

const EvaluationRouteWithChildren = EvaluationRoute._addFileChildren(
  EvaluationRouteChildren,
)

interface ExploreRouteChildren {
  ExploreGraphRoute: typeof ExploreGraphRoute
}

const ExploreRouteChildren: ExploreRouteChildren = {
  ExploreGraphRoute: ExploreGraphRoute,
}

const ExploreRouteWithChildren =
  ExploreRoute._addFileChildren(ExploreRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  ExternalIdRoute: ExternalIdRoute,
  AboutRoute: AboutRoute,
  BookmarksRoute: BookmarksRoute,
  BrowseRoute: BrowseRoute,
  CacheRoute: CacheRoute,
  ErrorTestRoute: ErrorTestRoute,
  EvaluationRoute: EvaluationRouteWithChildren,
  ExploreRoute: ExploreRouteWithChildren,
  HistoryRoute: HistoryRoute,
  SearchRoute: SearchRoute,
  ApiOpenalexOrgSplatRoute: ApiOpenalexOrgSplatRoute,
  AuthorsAuthorIdRoute: AuthorsAuthorIdRoute,
  FundersFunderIdRoute: FundersFunderIdRoute,
  HttpsSplatRoute: HttpsSplatRoute,
  InstitutionsInstitutionIdRoute: InstitutionsInstitutionIdRoute,
  OpenalexUrlSplatRoute: OpenalexUrlSplatRoute,
  SourcesSourceIdRoute: SourcesSourceIdRoute,
  TopicsTopicIdRoute: TopicsTopicIdRoute,
  WorksWorkIdRoute: WorksWorkIdRoute,
  AuthorsIndexRoute: AuthorsIndexRoute,
  AutocompleteIndexRoute: AutocompleteIndexRoute,
  ConceptsIndexRoute: ConceptsIndexRoute,
  FundersIndexRoute: FundersIndexRoute,
  InstitutionsIndexRoute: InstitutionsIndexRoute,
  KeywordsIndexRoute: KeywordsIndexRoute,
  PublishersIndexRoute: PublishersIndexRoute,
  SourcesIndexRoute: SourcesIndexRoute,
  TextIndexRoute: TextIndexRoute,
  TopicsIndexRoute: TopicsIndexRoute,
  WorksIndexRoute: WorksIndexRoute,
  AuthorsOrcidOrcidRoute: AuthorsOrcidOrcidRoute,
  InstitutionsRorRorRoute: InstitutionsRorRorRoute,
  OpenalexOrgSplatRoute: OpenalexOrgSplatRoute,
  SourcesIssnIssnRoute: SourcesIssnIssnRoute,
  WorksDoiDoiRoute: WorksDoiDoiRoute,
  AutocompleteAuthorsIndexRoute: AutocompleteAuthorsIndexRoute,
  AutocompleteConceptsIndexRoute: AutocompleteConceptsIndexRoute,
  AutocompleteFundersIndexRoute: AutocompleteFundersIndexRoute,
  AutocompleteInstitutionsIndexRoute: AutocompleteInstitutionsIndexRoute,
  AutocompletePublishersIndexRoute: AutocompletePublishersIndexRoute,
  AutocompleteSourcesIndexRoute: AutocompleteSourcesIndexRoute,
  AutocompleteWorksIndexRoute: AutocompleteWorksIndexRoute,
  TextConceptsIndexRoute: TextConceptsIndexRoute,
  TextKeywordsIndexRoute: TextKeywordsIndexRoute,
  TextTopicsIndexRoute: TextTopicsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
