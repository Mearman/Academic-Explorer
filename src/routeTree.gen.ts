/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as HelpRouteImport } from './routes/help'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as EntityIdRouteImport } from './routes/$entityId'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorksIdRouteImport } from './routes/works.$id'
import { Route as WikidataIdRouteImport } from './routes/wikidata.$id'
import { Route as TopicsIdRouteImport } from './routes/topics.$id'
import { Route as SourcesIdRouteImport } from './routes/sources.$id'
import { Route as RorPathRouteImport } from './routes/ror.$path'
import { Route as RegionsIdRouteImport } from './routes/regions.$id'
import { Route as PublishersIdRouteImport } from './routes/publishers.$id'
import { Route as OrcidIdRouteImport } from './routes/orcid.$id'
import { Route as KeywordsIdRouteImport } from './routes/keywords.$id'
import { Route as IssnIdRouteImport } from './routes/issn.$id'
import { Route as InstitutionsIdRouteImport } from './routes/institutions.$id'
import { Route as FundersIdRouteImport } from './routes/funders.$id'
import { Route as EntitySplatRouteImport } from './routes/entity.$'
import { Route as DoiPathRouteImport } from './routes/doi.$path'
import { Route as ContinentsIdRouteImport } from './routes/continents.$id'
import { Route as ConceptsIdRouteImport } from './routes/concepts.$id'
import { Route as AuthorsIdRouteImport } from './routes/authors.$id'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const HelpRoute = HelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const EntityIdRoute = EntityIdRouteImport.update({
  id: '/$entityId',
  path: '/$entityId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorksIdRoute = WorksIdRouteImport.update({
  id: '/works/$id',
  path: '/works/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const WikidataIdRoute = WikidataIdRouteImport.update({
  id: '/wikidata/$id',
  path: '/wikidata/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsIdRoute = TopicsIdRouteImport.update({
  id: '/topics/$id',
  path: '/topics/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesIdRoute = SourcesIdRouteImport.update({
  id: '/sources/$id',
  path: '/sources/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const RorPathRoute = RorPathRouteImport.update({
  id: '/ror/$path',
  path: '/ror/$path',
  getParentRoute: () => rootRouteImport,
} as any)
const RegionsIdRoute = RegionsIdRouteImport.update({
  id: '/regions/$id',
  path: '/regions/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PublishersIdRoute = PublishersIdRouteImport.update({
  id: '/publishers/$id',
  path: '/publishers/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const OrcidIdRoute = OrcidIdRouteImport.update({
  id: '/orcid/$id',
  path: '/orcid/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const KeywordsIdRoute = KeywordsIdRouteImport.update({
  id: '/keywords/$id',
  path: '/keywords/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const IssnIdRoute = IssnIdRouteImport.update({
  id: '/issn/$id',
  path: '/issn/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const InstitutionsIdRoute = InstitutionsIdRouteImport.update({
  id: '/institutions/$id',
  path: '/institutions/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const FundersIdRoute = FundersIdRouteImport.update({
  id: '/funders/$id',
  path: '/funders/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const EntitySplatRoute = EntitySplatRouteImport.update({
  id: '/entity/$',
  path: '/entity/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DoiPathRoute = DoiPathRouteImport.update({
  id: '/doi/$path',
  path: '/doi/$path',
  getParentRoute: () => rootRouteImport,
} as any)
const ContinentsIdRoute = ContinentsIdRouteImport.update({
  id: '/continents/$id',
  path: '/continents/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ConceptsIdRoute = ConceptsIdRouteImport.update({
  id: '/concepts/$id',
  path: '/concepts/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorsIdRoute = AuthorsIdRouteImport.update({
  id: '/authors/$id',
  path: '/authors/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$entityId': typeof EntityIdRoute
  '/dashboard': typeof DashboardRoute
  '/help': typeof HelpRoute
  '/search': typeof SearchRoute
  '/authors/$id': typeof AuthorsIdRoute
  '/concepts/$id': typeof ConceptsIdRoute
  '/continents/$id': typeof ContinentsIdRoute
  '/doi/$path': typeof DoiPathRoute
  '/entity/$': typeof EntitySplatRoute
  '/funders/$id': typeof FundersIdRoute
  '/institutions/$id': typeof InstitutionsIdRoute
  '/issn/$id': typeof IssnIdRoute
  '/keywords/$id': typeof KeywordsIdRoute
  '/orcid/$id': typeof OrcidIdRoute
  '/publishers/$id': typeof PublishersIdRoute
  '/regions/$id': typeof RegionsIdRoute
  '/ror/$path': typeof RorPathRoute
  '/sources/$id': typeof SourcesIdRoute
  '/topics/$id': typeof TopicsIdRoute
  '/wikidata/$id': typeof WikidataIdRoute
  '/works/$id': typeof WorksIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$entityId': typeof EntityIdRoute
  '/dashboard': typeof DashboardRoute
  '/help': typeof HelpRoute
  '/search': typeof SearchRoute
  '/authors/$id': typeof AuthorsIdRoute
  '/concepts/$id': typeof ConceptsIdRoute
  '/continents/$id': typeof ContinentsIdRoute
  '/doi/$path': typeof DoiPathRoute
  '/entity/$': typeof EntitySplatRoute
  '/funders/$id': typeof FundersIdRoute
  '/institutions/$id': typeof InstitutionsIdRoute
  '/issn/$id': typeof IssnIdRoute
  '/keywords/$id': typeof KeywordsIdRoute
  '/orcid/$id': typeof OrcidIdRoute
  '/publishers/$id': typeof PublishersIdRoute
  '/regions/$id': typeof RegionsIdRoute
  '/ror/$path': typeof RorPathRoute
  '/sources/$id': typeof SourcesIdRoute
  '/topics/$id': typeof TopicsIdRoute
  '/wikidata/$id': typeof WikidataIdRoute
  '/works/$id': typeof WorksIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$entityId': typeof EntityIdRoute
  '/dashboard': typeof DashboardRoute
  '/help': typeof HelpRoute
  '/search': typeof SearchRoute
  '/authors/$id': typeof AuthorsIdRoute
  '/concepts/$id': typeof ConceptsIdRoute
  '/continents/$id': typeof ContinentsIdRoute
  '/doi/$path': typeof DoiPathRoute
  '/entity/$': typeof EntitySplatRoute
  '/funders/$id': typeof FundersIdRoute
  '/institutions/$id': typeof InstitutionsIdRoute
  '/issn/$id': typeof IssnIdRoute
  '/keywords/$id': typeof KeywordsIdRoute
  '/orcid/$id': typeof OrcidIdRoute
  '/publishers/$id': typeof PublishersIdRoute
  '/regions/$id': typeof RegionsIdRoute
  '/ror/$path': typeof RorPathRoute
  '/sources/$id': typeof SourcesIdRoute
  '/topics/$id': typeof TopicsIdRoute
  '/wikidata/$id': typeof WikidataIdRoute
  '/works/$id': typeof WorksIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$entityId'
    | '/dashboard'
    | '/help'
    | '/search'
    | '/authors/$id'
    | '/concepts/$id'
    | '/continents/$id'
    | '/doi/$path'
    | '/entity/$'
    | '/funders/$id'
    | '/institutions/$id'
    | '/issn/$id'
    | '/keywords/$id'
    | '/orcid/$id'
    | '/publishers/$id'
    | '/regions/$id'
    | '/ror/$path'
    | '/sources/$id'
    | '/topics/$id'
    | '/wikidata/$id'
    | '/works/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$entityId'
    | '/dashboard'
    | '/help'
    | '/search'
    | '/authors/$id'
    | '/concepts/$id'
    | '/continents/$id'
    | '/doi/$path'
    | '/entity/$'
    | '/funders/$id'
    | '/institutions/$id'
    | '/issn/$id'
    | '/keywords/$id'
    | '/orcid/$id'
    | '/publishers/$id'
    | '/regions/$id'
    | '/ror/$path'
    | '/sources/$id'
    | '/topics/$id'
    | '/wikidata/$id'
    | '/works/$id'
  id:
    | '__root__'
    | '/'
    | '/$entityId'
    | '/dashboard'
    | '/help'
    | '/search'
    | '/authors/$id'
    | '/concepts/$id'
    | '/continents/$id'
    | '/doi/$path'
    | '/entity/$'
    | '/funders/$id'
    | '/institutions/$id'
    | '/issn/$id'
    | '/keywords/$id'
    | '/orcid/$id'
    | '/publishers/$id'
    | '/regions/$id'
    | '/ror/$path'
    | '/sources/$id'
    | '/topics/$id'
    | '/wikidata/$id'
    | '/works/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EntityIdRoute: typeof EntityIdRoute
  DashboardRoute: typeof DashboardRoute
  HelpRoute: typeof HelpRoute
  SearchRoute: typeof SearchRoute
  AuthorsIdRoute: typeof AuthorsIdRoute
  ConceptsIdRoute: typeof ConceptsIdRoute
  ContinentsIdRoute: typeof ContinentsIdRoute
  DoiPathRoute: typeof DoiPathRoute
  EntitySplatRoute: typeof EntitySplatRoute
  FundersIdRoute: typeof FundersIdRoute
  InstitutionsIdRoute: typeof InstitutionsIdRoute
  IssnIdRoute: typeof IssnIdRoute
  KeywordsIdRoute: typeof KeywordsIdRoute
  OrcidIdRoute: typeof OrcidIdRoute
  PublishersIdRoute: typeof PublishersIdRoute
  RegionsIdRoute: typeof RegionsIdRoute
  RorPathRoute: typeof RorPathRoute
  SourcesIdRoute: typeof SourcesIdRoute
  TopicsIdRoute: typeof TopicsIdRoute
  WikidataIdRoute: typeof WikidataIdRoute
  WorksIdRoute: typeof WorksIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$entityId': {
      id: '/$entityId'
      path: '/$entityId'
      fullPath: '/$entityId'
      preLoaderRoute: typeof EntityIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/works/$id': {
      id: '/works/$id'
      path: '/works/$id'
      fullPath: '/works/$id'
      preLoaderRoute: typeof WorksIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/wikidata/$id': {
      id: '/wikidata/$id'
      path: '/wikidata/$id'
      fullPath: '/wikidata/$id'
      preLoaderRoute: typeof WikidataIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics/$id': {
      id: '/topics/$id'
      path: '/topics/$id'
      fullPath: '/topics/$id'
      preLoaderRoute: typeof TopicsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources/$id': {
      id: '/sources/$id'
      path: '/sources/$id'
      fullPath: '/sources/$id'
      preLoaderRoute: typeof SourcesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ror/$path': {
      id: '/ror/$path'
      path: '/ror/$path'
      fullPath: '/ror/$path'
      preLoaderRoute: typeof RorPathRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/regions/$id': {
      id: '/regions/$id'
      path: '/regions/$id'
      fullPath: '/regions/$id'
      preLoaderRoute: typeof RegionsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/publishers/$id': {
      id: '/publishers/$id'
      path: '/publishers/$id'
      fullPath: '/publishers/$id'
      preLoaderRoute: typeof PublishersIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orcid/$id': {
      id: '/orcid/$id'
      path: '/orcid/$id'
      fullPath: '/orcid/$id'
      preLoaderRoute: typeof OrcidIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/keywords/$id': {
      id: '/keywords/$id'
      path: '/keywords/$id'
      fullPath: '/keywords/$id'
      preLoaderRoute: typeof KeywordsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/issn/$id': {
      id: '/issn/$id'
      path: '/issn/$id'
      fullPath: '/issn/$id'
      preLoaderRoute: typeof IssnIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/institutions/$id': {
      id: '/institutions/$id'
      path: '/institutions/$id'
      fullPath: '/institutions/$id'
      preLoaderRoute: typeof InstitutionsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/funders/$id': {
      id: '/funders/$id'
      path: '/funders/$id'
      fullPath: '/funders/$id'
      preLoaderRoute: typeof FundersIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entity/$': {
      id: '/entity/$'
      path: '/entity/$'
      fullPath: '/entity/$'
      preLoaderRoute: typeof EntitySplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/doi/$path': {
      id: '/doi/$path'
      path: '/doi/$path'
      fullPath: '/doi/$path'
      preLoaderRoute: typeof DoiPathRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/continents/$id': {
      id: '/continents/$id'
      path: '/continents/$id'
      fullPath: '/continents/$id'
      preLoaderRoute: typeof ContinentsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/concepts/$id': {
      id: '/concepts/$id'
      path: '/concepts/$id'
      fullPath: '/concepts/$id'
      preLoaderRoute: typeof ConceptsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authors/$id': {
      id: '/authors/$id'
      path: '/authors/$id'
      fullPath: '/authors/$id'
      preLoaderRoute: typeof AuthorsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EntityIdRoute: EntityIdRoute,
  DashboardRoute: DashboardRoute,
  HelpRoute: HelpRoute,
  SearchRoute: SearchRoute,
  AuthorsIdRoute: AuthorsIdRoute,
  ConceptsIdRoute: ConceptsIdRoute,
  ContinentsIdRoute: ContinentsIdRoute,
  DoiPathRoute: DoiPathRoute,
  EntitySplatRoute: EntitySplatRoute,
  FundersIdRoute: FundersIdRoute,
  InstitutionsIdRoute: InstitutionsIdRoute,
  IssnIdRoute: IssnIdRoute,
  KeywordsIdRoute: KeywordsIdRoute,
  OrcidIdRoute: OrcidIdRoute,
  PublishersIdRoute: PublishersIdRoute,
  RegionsIdRoute: RegionsIdRoute,
  RorPathRoute: RorPathRoute,
  SourcesIdRoute: SourcesIdRoute,
  TopicsIdRoute: TopicsIdRoute,
  WikidataIdRoute: WikidataIdRoute,
  WorksIdRoute: WorksIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
