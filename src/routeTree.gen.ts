/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as GraphRouteImport } from './routes/graph'
import { Route as ExploreRouteImport } from './routes/explore'
import { Route as EvaluationRouteImport } from './routes/evaluation'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as ApiTestRouteImport } from './routes/api-test'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ExternalIdRouteImport } from './routes/$externalId'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ExploreGraphRouteImport } from './routes/explore/graph'
import { Route as EvaluationResultsRouteImport } from './routes/evaluation/results'
import { Route as EvaluationDatasetsRouteImport } from './routes/evaluation/datasets'
import { Route as WorksDoiDoiRouteImport } from './routes/works/doi.$doi'
import { Route as SourcesIssnIssnRouteImport } from './routes/sources/issn.$issn'
import { Route as InstitutionsRorRorRouteImport } from './routes/institutions/ror.$ror'
import { Route as AuthorsOrcidOrcidRouteImport } from './routes/authors/orcid.$orcid'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const GraphRoute = GraphRouteImport.update({
  id: '/graph',
  path: '/graph',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreRoute = ExploreRouteImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluationRoute = EvaluationRouteImport.update({
  id: '/evaluation',
  path: '/evaluation',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTestRoute = ApiTestRouteImport.update({
  id: '/api-test',
  path: '/api-test',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ExternalIdRoute = ExternalIdRouteImport.update({
  id: '/$externalId',
  path: '/$externalId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExploreGraphRoute = ExploreGraphRouteImport.update({
  id: '/graph',
  path: '/graph',
  getParentRoute: () => ExploreRoute,
} as any)
const EvaluationResultsRoute = EvaluationResultsRouteImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => EvaluationRoute,
} as any)
const EvaluationDatasetsRoute = EvaluationDatasetsRouteImport.update({
  id: '/datasets',
  path: '/datasets',
  getParentRoute: () => EvaluationRoute,
} as any)
const WorksDoiDoiRoute = WorksDoiDoiRouteImport.update({
  id: '/works/doi/$doi',
  path: '/works/doi/$doi',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesIssnIssnRoute = SourcesIssnIssnRouteImport.update({
  id: '/sources/issn/$issn',
  path: '/sources/issn/$issn',
  getParentRoute: () => rootRouteImport,
} as any)
const InstitutionsRorRorRoute = InstitutionsRorRorRouteImport.update({
  id: '/institutions/ror/$ror',
  path: '/institutions/ror/$ror',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorsOrcidOrcidRoute = AuthorsOrcidOrcidRouteImport.update({
  id: '/authors/orcid/$orcid',
  path: '/authors/orcid/$orcid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$externalId': typeof ExternalIdRoute
  '/about': typeof AboutRoute
  '/api-test': typeof ApiTestRoute
  '/demo': typeof DemoRoute
  '/evaluation': typeof EvaluationRouteWithChildren
  '/explore': typeof ExploreRouteWithChildren
  '/graph': typeof GraphRoute
  '/search': typeof SearchRoute
  '/evaluation/datasets': typeof EvaluationDatasetsRoute
  '/evaluation/results': typeof EvaluationResultsRoute
  '/explore/graph': typeof ExploreGraphRoute
  '/authors/orcid/$orcid': typeof AuthorsOrcidOrcidRoute
  '/institutions/ror/$ror': typeof InstitutionsRorRorRoute
  '/sources/issn/$issn': typeof SourcesIssnIssnRoute
  '/works/doi/$doi': typeof WorksDoiDoiRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$externalId': typeof ExternalIdRoute
  '/about': typeof AboutRoute
  '/api-test': typeof ApiTestRoute
  '/demo': typeof DemoRoute
  '/evaluation': typeof EvaluationRouteWithChildren
  '/explore': typeof ExploreRouteWithChildren
  '/graph': typeof GraphRoute
  '/search': typeof SearchRoute
  '/evaluation/datasets': typeof EvaluationDatasetsRoute
  '/evaluation/results': typeof EvaluationResultsRoute
  '/explore/graph': typeof ExploreGraphRoute
  '/authors/orcid/$orcid': typeof AuthorsOrcidOrcidRoute
  '/institutions/ror/$ror': typeof InstitutionsRorRorRoute
  '/sources/issn/$issn': typeof SourcesIssnIssnRoute
  '/works/doi/$doi': typeof WorksDoiDoiRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$externalId': typeof ExternalIdRoute
  '/about': typeof AboutRoute
  '/api-test': typeof ApiTestRoute
  '/demo': typeof DemoRoute
  '/evaluation': typeof EvaluationRouteWithChildren
  '/explore': typeof ExploreRouteWithChildren
  '/graph': typeof GraphRoute
  '/search': typeof SearchRoute
  '/evaluation/datasets': typeof EvaluationDatasetsRoute
  '/evaluation/results': typeof EvaluationResultsRoute
  '/explore/graph': typeof ExploreGraphRoute
  '/authors/orcid/$orcid': typeof AuthorsOrcidOrcidRoute
  '/institutions/ror/$ror': typeof InstitutionsRorRorRoute
  '/sources/issn/$issn': typeof SourcesIssnIssnRoute
  '/works/doi/$doi': typeof WorksDoiDoiRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$externalId'
    | '/about'
    | '/api-test'
    | '/demo'
    | '/evaluation'
    | '/explore'
    | '/graph'
    | '/search'
    | '/evaluation/datasets'
    | '/evaluation/results'
    | '/explore/graph'
    | '/authors/orcid/$orcid'
    | '/institutions/ror/$ror'
    | '/sources/issn/$issn'
    | '/works/doi/$doi'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$externalId'
    | '/about'
    | '/api-test'
    | '/demo'
    | '/evaluation'
    | '/explore'
    | '/graph'
    | '/search'
    | '/evaluation/datasets'
    | '/evaluation/results'
    | '/explore/graph'
    | '/authors/orcid/$orcid'
    | '/institutions/ror/$ror'
    | '/sources/issn/$issn'
    | '/works/doi/$doi'
  id:
    | '__root__'
    | '/'
    | '/$externalId'
    | '/about'
    | '/api-test'
    | '/demo'
    | '/evaluation'
    | '/explore'
    | '/graph'
    | '/search'
    | '/evaluation/datasets'
    | '/evaluation/results'
    | '/explore/graph'
    | '/authors/orcid/$orcid'
    | '/institutions/ror/$ror'
    | '/sources/issn/$issn'
    | '/works/doi/$doi'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExternalIdRoute: typeof ExternalIdRoute
  AboutRoute: typeof AboutRoute
  ApiTestRoute: typeof ApiTestRoute
  DemoRoute: typeof DemoRoute
  EvaluationRoute: typeof EvaluationRouteWithChildren
  ExploreRoute: typeof ExploreRouteWithChildren
  GraphRoute: typeof GraphRoute
  SearchRoute: typeof SearchRoute
  AuthorsOrcidOrcidRoute: typeof AuthorsOrcidOrcidRoute
  InstitutionsRorRorRoute: typeof InstitutionsRorRorRoute
  SourcesIssnIssnRoute: typeof SourcesIssnIssnRoute
  WorksDoiDoiRoute: typeof WorksDoiDoiRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/graph': {
      id: '/graph'
      path: '/graph'
      fullPath: '/graph'
      preLoaderRoute: typeof GraphRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evaluation': {
      id: '/evaluation'
      path: '/evaluation'
      fullPath: '/evaluation'
      preLoaderRoute: typeof EvaluationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-test': {
      id: '/api-test'
      path: '/api-test'
      fullPath: '/api-test'
      preLoaderRoute: typeof ApiTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$externalId': {
      id: '/$externalId'
      path: '/$externalId'
      fullPath: '/$externalId'
      preLoaderRoute: typeof ExternalIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/explore/graph': {
      id: '/explore/graph'
      path: '/graph'
      fullPath: '/explore/graph'
      preLoaderRoute: typeof ExploreGraphRouteImport
      parentRoute: typeof ExploreRoute
    }
    '/evaluation/results': {
      id: '/evaluation/results'
      path: '/results'
      fullPath: '/evaluation/results'
      preLoaderRoute: typeof EvaluationResultsRouteImport
      parentRoute: typeof EvaluationRoute
    }
    '/evaluation/datasets': {
      id: '/evaluation/datasets'
      path: '/datasets'
      fullPath: '/evaluation/datasets'
      preLoaderRoute: typeof EvaluationDatasetsRouteImport
      parentRoute: typeof EvaluationRoute
    }
    '/works/doi/$doi': {
      id: '/works/doi/$doi'
      path: '/works/doi/$doi'
      fullPath: '/works/doi/$doi'
      preLoaderRoute: typeof WorksDoiDoiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources/issn/$issn': {
      id: '/sources/issn/$issn'
      path: '/sources/issn/$issn'
      fullPath: '/sources/issn/$issn'
      preLoaderRoute: typeof SourcesIssnIssnRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/institutions/ror/$ror': {
      id: '/institutions/ror/$ror'
      path: '/institutions/ror/$ror'
      fullPath: '/institutions/ror/$ror'
      preLoaderRoute: typeof InstitutionsRorRorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authors/orcid/$orcid': {
      id: '/authors/orcid/$orcid'
      path: '/authors/orcid/$orcid'
      fullPath: '/authors/orcid/$orcid'
      preLoaderRoute: typeof AuthorsOrcidOrcidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface EvaluationRouteChildren {
  EvaluationDatasetsRoute: typeof EvaluationDatasetsRoute
  EvaluationResultsRoute: typeof EvaluationResultsRoute
}

const EvaluationRouteChildren: EvaluationRouteChildren = {
  EvaluationDatasetsRoute: EvaluationDatasetsRoute,
  EvaluationResultsRoute: EvaluationResultsRoute,
}

const EvaluationRouteWithChildren = EvaluationRoute._addFileChildren(
  EvaluationRouteChildren,
)

interface ExploreRouteChildren {
  ExploreGraphRoute: typeof ExploreGraphRoute
}

const ExploreRouteChildren: ExploreRouteChildren = {
  ExploreGraphRoute: ExploreGraphRoute,
}

const ExploreRouteWithChildren =
  ExploreRoute._addFileChildren(ExploreRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExternalIdRoute: ExternalIdRoute,
  AboutRoute: AboutRoute,
  ApiTestRoute: ApiTestRoute,
  DemoRoute: DemoRoute,
  EvaluationRoute: EvaluationRouteWithChildren,
  ExploreRoute: ExploreRouteWithChildren,
  GraphRoute: GraphRoute,
  SearchRoute: SearchRoute,
  AuthorsOrcidOrcidRoute: AuthorsOrcidOrcidRoute,
  InstitutionsRorRorRoute: InstitutionsRorRorRoute,
  SourcesIssnIssnRoute: SourcesIssnIssnRoute,
  WorksDoiDoiRoute: WorksDoiDoiRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
