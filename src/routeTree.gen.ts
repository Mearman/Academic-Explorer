/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorksRouteImport } from './routes/works'
import { Route as TopicsRouteImport } from './routes/topics'
import { Route as SourcesRouteImport } from './routes/sources'
import { Route as QueryRouteImport } from './routes/query'
import { Route as PublishersRouteImport } from './routes/publishers'
import { Route as ManageRouteImport } from './routes/manage'
import { Route as InstitutionsRouteImport } from './routes/institutions'
import { Route as HelpRouteImport } from './routes/help'
import { Route as FundersRouteImport } from './routes/funders'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ConceptsRouteImport } from './routes/concepts'
import { Route as AuthorsRouteImport } from './routes/authors'
import { Route as BareIdRouteImport } from './routes/$bareId'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorksIndexRouteImport } from './routes/works/index'
import { Route as TopicsIndexRouteImport } from './routes/topics/index'
import { Route as SourcesIndexRouteImport } from './routes/sources/index'
import { Route as PublishersIndexRouteImport } from './routes/publishers/index'
import { Route as InstitutionsIndexRouteImport } from './routes/institutions/index'
import { Route as FundersIndexRouteImport } from './routes/funders/index'
import { Route as ConceptsIndexRouteImport } from './routes/concepts/index'
import { Route as AuthorsIndexRouteImport } from './routes/authors/index'
import { Route as WorksIdRouteImport } from './routes/works/$id'
import { Route as WikidataIdRouteImport } from './routes/wikidata.$id'
import { Route as SourcesIdRouteImport } from './routes/sources/$id'
import { Route as RorPathRouteImport } from './routes/ror.$path'
import { Route as RegionsIdRouteImport } from './routes/regions.$id'
import { Route as OrcidIdRouteImport } from './routes/orcid.$id'
import { Route as KeywordsIdRouteImport } from './routes/keywords.$id'
import { Route as IssnIdRouteImport } from './routes/issn.$id'
import { Route as InstitutionsIdRouteImport } from './routes/institutions/$id'
import { Route as HttpsSplatRouteImport } from './routes/https.$'
import { Route as DoiPathRouteImport } from './routes/doi.$path'
import { Route as ContinentsIdRouteImport } from './routes/continents.$id'
import { Route as AuthorsIdRouteImport } from './routes/authors/$id'

const WorksRoute = WorksRouteImport.update({
  id: '/works',
  path: '/works',
  getParentRoute: () => rootRouteImport,
} as any)
const TopicsRoute = TopicsRouteImport.update({
  id: '/topics',
  path: '/topics',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesRoute = SourcesRouteImport.update({
  id: '/sources',
  path: '/sources',
  getParentRoute: () => rootRouteImport,
} as any)
const QueryRoute = QueryRouteImport.update({
  id: '/query',
  path: '/query',
  getParentRoute: () => rootRouteImport,
} as any)
const PublishersRoute = PublishersRouteImport.update({
  id: '/publishers',
  path: '/publishers',
  getParentRoute: () => rootRouteImport,
} as any)
const ManageRoute = ManageRouteImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => rootRouteImport,
} as any)
const InstitutionsRoute = InstitutionsRouteImport.update({
  id: '/institutions',
  path: '/institutions',
  getParentRoute: () => rootRouteImport,
} as any)
const HelpRoute = HelpRouteImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRouteImport,
} as any)
const FundersRoute = FundersRouteImport.update({
  id: '/funders',
  path: '/funders',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ConceptsRoute = ConceptsRouteImport.update({
  id: '/concepts',
  path: '/concepts',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorsRoute = AuthorsRouteImport.update({
  id: '/authors',
  path: '/authors',
  getParentRoute: () => rootRouteImport,
} as any)
const BareIdRoute = BareIdRouteImport.update({
  id: '/$bareId',
  path: '/$bareId',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorksIndexRoute = WorksIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorksRoute,
} as any)
const TopicsIndexRoute = TopicsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TopicsRoute,
} as any)
const SourcesIndexRoute = SourcesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SourcesRoute,
} as any)
const PublishersIndexRoute = PublishersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublishersRoute,
} as any)
const InstitutionsIndexRoute = InstitutionsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => InstitutionsRoute,
} as any)
const FundersIndexRoute = FundersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => FundersRoute,
} as any)
const ConceptsIndexRoute = ConceptsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ConceptsRoute,
} as any)
const AuthorsIndexRoute = AuthorsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthorsRoute,
} as any)
const WorksIdRoute = WorksIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => WorksRoute,
} as any)
const WikidataIdRoute = WikidataIdRouteImport.update({
  id: '/wikidata/$id',
  path: '/wikidata/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesIdRoute = SourcesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => SourcesRoute,
} as any)
const RorPathRoute = RorPathRouteImport.update({
  id: '/ror/$path',
  path: '/ror/$path',
  getParentRoute: () => rootRouteImport,
} as any)
const RegionsIdRoute = RegionsIdRouteImport.update({
  id: '/regions/$id',
  path: '/regions/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const OrcidIdRoute = OrcidIdRouteImport.update({
  id: '/orcid/$id',
  path: '/orcid/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const KeywordsIdRoute = KeywordsIdRouteImport.update({
  id: '/keywords/$id',
  path: '/keywords/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const IssnIdRoute = IssnIdRouteImport.update({
  id: '/issn/$id',
  path: '/issn/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const InstitutionsIdRoute = InstitutionsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => InstitutionsRoute,
} as any)
const HttpsSplatRoute = HttpsSplatRouteImport.update({
  id: '/https/$',
  path: '/https/$',
  getParentRoute: () => rootRouteImport,
} as any)
const DoiPathRoute = DoiPathRouteImport.update({
  id: '/doi/$path',
  path: '/doi/$path',
  getParentRoute: () => rootRouteImport,
} as any)
const ContinentsIdRoute = ContinentsIdRouteImport.update({
  id: '/continents/$id',
  path: '/continents/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthorsIdRoute = AuthorsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthorsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$bareId': typeof BareIdRoute
  '/authors': typeof AuthorsRouteWithChildren
  '/concepts': typeof ConceptsRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/funders': typeof FundersRouteWithChildren
  '/help': typeof HelpRoute
  '/institutions': typeof InstitutionsRouteWithChildren
  '/manage': typeof ManageRoute
  '/publishers': typeof PublishersRouteWithChildren
  '/query': typeof QueryRoute
  '/sources': typeof SourcesRouteWithChildren
  '/topics': typeof TopicsRouteWithChildren
  '/works': typeof WorksRouteWithChildren
  '/authors/$id': typeof AuthorsIdRoute
  '/continents/$id': typeof ContinentsIdRoute
  '/doi/$path': typeof DoiPathRoute
  '/https/$': typeof HttpsSplatRoute
  '/institutions/$id': typeof InstitutionsIdRoute
  '/issn/$id': typeof IssnIdRoute
  '/keywords/$id': typeof KeywordsIdRoute
  '/orcid/$id': typeof OrcidIdRoute
  '/regions/$id': typeof RegionsIdRoute
  '/ror/$path': typeof RorPathRoute
  '/sources/$id': typeof SourcesIdRoute
  '/wikidata/$id': typeof WikidataIdRoute
  '/works/$id': typeof WorksIdRoute
  '/authors/': typeof AuthorsIndexRoute
  '/concepts/': typeof ConceptsIndexRoute
  '/funders/': typeof FundersIndexRoute
  '/institutions/': typeof InstitutionsIndexRoute
  '/publishers/': typeof PublishersIndexRoute
  '/sources/': typeof SourcesIndexRoute
  '/topics/': typeof TopicsIndexRoute
  '/works/': typeof WorksIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$bareId': typeof BareIdRoute
  '/dashboard': typeof DashboardRoute
  '/help': typeof HelpRoute
  '/manage': typeof ManageRoute
  '/query': typeof QueryRoute
  '/authors/$id': typeof AuthorsIdRoute
  '/continents/$id': typeof ContinentsIdRoute
  '/doi/$path': typeof DoiPathRoute
  '/https/$': typeof HttpsSplatRoute
  '/institutions/$id': typeof InstitutionsIdRoute
  '/issn/$id': typeof IssnIdRoute
  '/keywords/$id': typeof KeywordsIdRoute
  '/orcid/$id': typeof OrcidIdRoute
  '/regions/$id': typeof RegionsIdRoute
  '/ror/$path': typeof RorPathRoute
  '/sources/$id': typeof SourcesIdRoute
  '/wikidata/$id': typeof WikidataIdRoute
  '/works/$id': typeof WorksIdRoute
  '/authors': typeof AuthorsIndexRoute
  '/concepts': typeof ConceptsIndexRoute
  '/funders': typeof FundersIndexRoute
  '/institutions': typeof InstitutionsIndexRoute
  '/publishers': typeof PublishersIndexRoute
  '/sources': typeof SourcesIndexRoute
  '/topics': typeof TopicsIndexRoute
  '/works': typeof WorksIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$bareId': typeof BareIdRoute
  '/authors': typeof AuthorsRouteWithChildren
  '/concepts': typeof ConceptsRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/funders': typeof FundersRouteWithChildren
  '/help': typeof HelpRoute
  '/institutions': typeof InstitutionsRouteWithChildren
  '/manage': typeof ManageRoute
  '/publishers': typeof PublishersRouteWithChildren
  '/query': typeof QueryRoute
  '/sources': typeof SourcesRouteWithChildren
  '/topics': typeof TopicsRouteWithChildren
  '/works': typeof WorksRouteWithChildren
  '/authors/$id': typeof AuthorsIdRoute
  '/continents/$id': typeof ContinentsIdRoute
  '/doi/$path': typeof DoiPathRoute
  '/https/$': typeof HttpsSplatRoute
  '/institutions/$id': typeof InstitutionsIdRoute
  '/issn/$id': typeof IssnIdRoute
  '/keywords/$id': typeof KeywordsIdRoute
  '/orcid/$id': typeof OrcidIdRoute
  '/regions/$id': typeof RegionsIdRoute
  '/ror/$path': typeof RorPathRoute
  '/sources/$id': typeof SourcesIdRoute
  '/wikidata/$id': typeof WikidataIdRoute
  '/works/$id': typeof WorksIdRoute
  '/authors/': typeof AuthorsIndexRoute
  '/concepts/': typeof ConceptsIndexRoute
  '/funders/': typeof FundersIndexRoute
  '/institutions/': typeof InstitutionsIndexRoute
  '/publishers/': typeof PublishersIndexRoute
  '/sources/': typeof SourcesIndexRoute
  '/topics/': typeof TopicsIndexRoute
  '/works/': typeof WorksIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$bareId'
    | '/authors'
    | '/concepts'
    | '/dashboard'
    | '/funders'
    | '/help'
    | '/institutions'
    | '/manage'
    | '/publishers'
    | '/query'
    | '/sources'
    | '/topics'
    | '/works'
    | '/authors/$id'
    | '/continents/$id'
    | '/doi/$path'
    | '/https/$'
    | '/institutions/$id'
    | '/issn/$id'
    | '/keywords/$id'
    | '/orcid/$id'
    | '/regions/$id'
    | '/ror/$path'
    | '/sources/$id'
    | '/wikidata/$id'
    | '/works/$id'
    | '/authors/'
    | '/concepts/'
    | '/funders/'
    | '/institutions/'
    | '/publishers/'
    | '/sources/'
    | '/topics/'
    | '/works/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$bareId'
    | '/dashboard'
    | '/help'
    | '/manage'
    | '/query'
    | '/authors/$id'
    | '/continents/$id'
    | '/doi/$path'
    | '/https/$'
    | '/institutions/$id'
    | '/issn/$id'
    | '/keywords/$id'
    | '/orcid/$id'
    | '/regions/$id'
    | '/ror/$path'
    | '/sources/$id'
    | '/wikidata/$id'
    | '/works/$id'
    | '/authors'
    | '/concepts'
    | '/funders'
    | '/institutions'
    | '/publishers'
    | '/sources'
    | '/topics'
    | '/works'
  id:
    | '__root__'
    | '/'
    | '/$bareId'
    | '/authors'
    | '/concepts'
    | '/dashboard'
    | '/funders'
    | '/help'
    | '/institutions'
    | '/manage'
    | '/publishers'
    | '/query'
    | '/sources'
    | '/topics'
    | '/works'
    | '/authors/$id'
    | '/continents/$id'
    | '/doi/$path'
    | '/https/$'
    | '/institutions/$id'
    | '/issn/$id'
    | '/keywords/$id'
    | '/orcid/$id'
    | '/regions/$id'
    | '/ror/$path'
    | '/sources/$id'
    | '/wikidata/$id'
    | '/works/$id'
    | '/authors/'
    | '/concepts/'
    | '/funders/'
    | '/institutions/'
    | '/publishers/'
    | '/sources/'
    | '/topics/'
    | '/works/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BareIdRoute: typeof BareIdRoute
  AuthorsRoute: typeof AuthorsRouteWithChildren
  ConceptsRoute: typeof ConceptsRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  FundersRoute: typeof FundersRouteWithChildren
  HelpRoute: typeof HelpRoute
  InstitutionsRoute: typeof InstitutionsRouteWithChildren
  ManageRoute: typeof ManageRoute
  PublishersRoute: typeof PublishersRouteWithChildren
  QueryRoute: typeof QueryRoute
  SourcesRoute: typeof SourcesRouteWithChildren
  TopicsRoute: typeof TopicsRouteWithChildren
  WorksRoute: typeof WorksRouteWithChildren
  ContinentsIdRoute: typeof ContinentsIdRoute
  DoiPathRoute: typeof DoiPathRoute
  HttpsSplatRoute: typeof HttpsSplatRoute
  IssnIdRoute: typeof IssnIdRoute
  KeywordsIdRoute: typeof KeywordsIdRoute
  OrcidIdRoute: typeof OrcidIdRoute
  RegionsIdRoute: typeof RegionsIdRoute
  RorPathRoute: typeof RorPathRoute
  WikidataIdRoute: typeof WikidataIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/works': {
      id: '/works'
      path: '/works'
      fullPath: '/works'
      preLoaderRoute: typeof WorksRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/topics': {
      id: '/topics'
      path: '/topics'
      fullPath: '/topics'
      preLoaderRoute: typeof TopicsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources': {
      id: '/sources'
      path: '/sources'
      fullPath: '/sources'
      preLoaderRoute: typeof SourcesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/query': {
      id: '/query'
      path: '/query'
      fullPath: '/query'
      preLoaderRoute: typeof QueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/publishers': {
      id: '/publishers'
      path: '/publishers'
      fullPath: '/publishers'
      preLoaderRoute: typeof PublishersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manage': {
      id: '/manage'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/institutions': {
      id: '/institutions'
      path: '/institutions'
      fullPath: '/institutions'
      preLoaderRoute: typeof InstitutionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/funders': {
      id: '/funders'
      path: '/funders'
      fullPath: '/funders'
      preLoaderRoute: typeof FundersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/concepts': {
      id: '/concepts'
      path: '/concepts'
      fullPath: '/concepts'
      preLoaderRoute: typeof ConceptsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authors': {
      id: '/authors'
      path: '/authors'
      fullPath: '/authors'
      preLoaderRoute: typeof AuthorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$bareId': {
      id: '/$bareId'
      path: '/$bareId'
      fullPath: '/$bareId'
      preLoaderRoute: typeof BareIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/works/': {
      id: '/works/'
      path: '/'
      fullPath: '/works/'
      preLoaderRoute: typeof WorksIndexRouteImport
      parentRoute: typeof WorksRoute
    }
    '/topics/': {
      id: '/topics/'
      path: '/'
      fullPath: '/topics/'
      preLoaderRoute: typeof TopicsIndexRouteImport
      parentRoute: typeof TopicsRoute
    }
    '/sources/': {
      id: '/sources/'
      path: '/'
      fullPath: '/sources/'
      preLoaderRoute: typeof SourcesIndexRouteImport
      parentRoute: typeof SourcesRoute
    }
    '/publishers/': {
      id: '/publishers/'
      path: '/'
      fullPath: '/publishers/'
      preLoaderRoute: typeof PublishersIndexRouteImport
      parentRoute: typeof PublishersRoute
    }
    '/institutions/': {
      id: '/institutions/'
      path: '/'
      fullPath: '/institutions/'
      preLoaderRoute: typeof InstitutionsIndexRouteImport
      parentRoute: typeof InstitutionsRoute
    }
    '/funders/': {
      id: '/funders/'
      path: '/'
      fullPath: '/funders/'
      preLoaderRoute: typeof FundersIndexRouteImport
      parentRoute: typeof FundersRoute
    }
    '/concepts/': {
      id: '/concepts/'
      path: '/'
      fullPath: '/concepts/'
      preLoaderRoute: typeof ConceptsIndexRouteImport
      parentRoute: typeof ConceptsRoute
    }
    '/authors/': {
      id: '/authors/'
      path: '/'
      fullPath: '/authors/'
      preLoaderRoute: typeof AuthorsIndexRouteImport
      parentRoute: typeof AuthorsRoute
    }
    '/works/$id': {
      id: '/works/$id'
      path: '/$id'
      fullPath: '/works/$id'
      preLoaderRoute: typeof WorksIdRouteImport
      parentRoute: typeof WorksRoute
    }
    '/wikidata/$id': {
      id: '/wikidata/$id'
      path: '/wikidata/$id'
      fullPath: '/wikidata/$id'
      preLoaderRoute: typeof WikidataIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources/$id': {
      id: '/sources/$id'
      path: '/$id'
      fullPath: '/sources/$id'
      preLoaderRoute: typeof SourcesIdRouteImport
      parentRoute: typeof SourcesRoute
    }
    '/ror/$path': {
      id: '/ror/$path'
      path: '/ror/$path'
      fullPath: '/ror/$path'
      preLoaderRoute: typeof RorPathRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/regions/$id': {
      id: '/regions/$id'
      path: '/regions/$id'
      fullPath: '/regions/$id'
      preLoaderRoute: typeof RegionsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orcid/$id': {
      id: '/orcid/$id'
      path: '/orcid/$id'
      fullPath: '/orcid/$id'
      preLoaderRoute: typeof OrcidIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/keywords/$id': {
      id: '/keywords/$id'
      path: '/keywords/$id'
      fullPath: '/keywords/$id'
      preLoaderRoute: typeof KeywordsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/issn/$id': {
      id: '/issn/$id'
      path: '/issn/$id'
      fullPath: '/issn/$id'
      preLoaderRoute: typeof IssnIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/institutions/$id': {
      id: '/institutions/$id'
      path: '/$id'
      fullPath: '/institutions/$id'
      preLoaderRoute: typeof InstitutionsIdRouteImport
      parentRoute: typeof InstitutionsRoute
    }
    '/https/$': {
      id: '/https/$'
      path: '/https/$'
      fullPath: '/https/$'
      preLoaderRoute: typeof HttpsSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/doi/$path': {
      id: '/doi/$path'
      path: '/doi/$path'
      fullPath: '/doi/$path'
      preLoaderRoute: typeof DoiPathRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/continents/$id': {
      id: '/continents/$id'
      path: '/continents/$id'
      fullPath: '/continents/$id'
      preLoaderRoute: typeof ContinentsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/authors/$id': {
      id: '/authors/$id'
      path: '/$id'
      fullPath: '/authors/$id'
      preLoaderRoute: typeof AuthorsIdRouteImport
      parentRoute: typeof AuthorsRoute
    }
  }
}

interface AuthorsRouteChildren {
  AuthorsIdRoute: typeof AuthorsIdRoute
  AuthorsIndexRoute: typeof AuthorsIndexRoute
}

const AuthorsRouteChildren: AuthorsRouteChildren = {
  AuthorsIdRoute: AuthorsIdRoute,
  AuthorsIndexRoute: AuthorsIndexRoute,
}

const AuthorsRouteWithChildren =
  AuthorsRoute._addFileChildren(AuthorsRouteChildren)

interface ConceptsRouteChildren {
  ConceptsIndexRoute: typeof ConceptsIndexRoute
}

const ConceptsRouteChildren: ConceptsRouteChildren = {
  ConceptsIndexRoute: ConceptsIndexRoute,
}

const ConceptsRouteWithChildren = ConceptsRoute._addFileChildren(
  ConceptsRouteChildren,
)

interface FundersRouteChildren {
  FundersIndexRoute: typeof FundersIndexRoute
}

const FundersRouteChildren: FundersRouteChildren = {
  FundersIndexRoute: FundersIndexRoute,
}

const FundersRouteWithChildren =
  FundersRoute._addFileChildren(FundersRouteChildren)

interface InstitutionsRouteChildren {
  InstitutionsIdRoute: typeof InstitutionsIdRoute
  InstitutionsIndexRoute: typeof InstitutionsIndexRoute
}

const InstitutionsRouteChildren: InstitutionsRouteChildren = {
  InstitutionsIdRoute: InstitutionsIdRoute,
  InstitutionsIndexRoute: InstitutionsIndexRoute,
}

const InstitutionsRouteWithChildren = InstitutionsRoute._addFileChildren(
  InstitutionsRouteChildren,
)

interface PublishersRouteChildren {
  PublishersIndexRoute: typeof PublishersIndexRoute
}

const PublishersRouteChildren: PublishersRouteChildren = {
  PublishersIndexRoute: PublishersIndexRoute,
}

const PublishersRouteWithChildren = PublishersRoute._addFileChildren(
  PublishersRouteChildren,
)

interface SourcesRouteChildren {
  SourcesIdRoute: typeof SourcesIdRoute
  SourcesIndexRoute: typeof SourcesIndexRoute
}

const SourcesRouteChildren: SourcesRouteChildren = {
  SourcesIdRoute: SourcesIdRoute,
  SourcesIndexRoute: SourcesIndexRoute,
}

const SourcesRouteWithChildren =
  SourcesRoute._addFileChildren(SourcesRouteChildren)

interface TopicsRouteChildren {
  TopicsIndexRoute: typeof TopicsIndexRoute
}

const TopicsRouteChildren: TopicsRouteChildren = {
  TopicsIndexRoute: TopicsIndexRoute,
}

const TopicsRouteWithChildren =
  TopicsRoute._addFileChildren(TopicsRouteChildren)

interface WorksRouteChildren {
  WorksIdRoute: typeof WorksIdRoute
  WorksIndexRoute: typeof WorksIndexRoute
}

const WorksRouteChildren: WorksRouteChildren = {
  WorksIdRoute: WorksIdRoute,
  WorksIndexRoute: WorksIndexRoute,
}

const WorksRouteWithChildren = WorksRoute._addFileChildren(WorksRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BareIdRoute: BareIdRoute,
  AuthorsRoute: AuthorsRouteWithChildren,
  ConceptsRoute: ConceptsRouteWithChildren,
  DashboardRoute: DashboardRoute,
  FundersRoute: FundersRouteWithChildren,
  HelpRoute: HelpRoute,
  InstitutionsRoute: InstitutionsRouteWithChildren,
  ManageRoute: ManageRoute,
  PublishersRoute: PublishersRouteWithChildren,
  QueryRoute: QueryRoute,
  SourcesRoute: SourcesRouteWithChildren,
  TopicsRoute: TopicsRouteWithChildren,
  WorksRoute: WorksRouteWithChildren,
  ContinentsIdRoute: ContinentsIdRoute,
  DoiPathRoute: DoiPathRoute,
  HttpsSplatRoute: HttpsSplatRoute,
  IssnIdRoute: IssnIdRoute,
  KeywordsIdRoute: KeywordsIdRoute,
  OrcidIdRoute: OrcidIdRoute,
  RegionsIdRoute: RegionsIdRoute,
  RorPathRoute: RorPathRoute,
  WikidataIdRoute: WikidataIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
